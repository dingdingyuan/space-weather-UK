

#-*- coding:utf-8 -*-
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from DIIM_model import diim
from Extract_data import extract_Z,select_loss_top5













def dynamic_graph(list_sectors,product_lost5,T_scales,qe_scales,qT_vec,x_vec, c_vec, Z_mat):
    # #ÁîªÂä®ÊÄÅÊõ≤Á∫øÂõæ

    # Êåâ‰∏äÈÉ®ËÆ°ÁÆóÁªòÂà∂
    list_product = product_lost5
    top5_list = [list_sectors[product_lost5[i]] for i in range(len(product_lost5))]
    top5_list = ["ELEC", "GAS", "COST", "WHSL", "RETA"]

    # list_real_time = [24*2,24*4,24*7,24*7*2,24*7*3,24*30,24*30*2,24*30*6,24*30*12]

    print("Start drawing\nIndexÔºö", list_product, "\nThe corresponding abbreviation is set toÔºö", top5_list)
    # color_list = ["#9EAFFB","#A7BCDA","#D2B18C","#E23735","#474747"]
    color_list = ["#F2ECFF", "#A7BCDA", "#D2B18C", "#E23735", "#474747"]
    #
    #
    import matplotlib.patheffects as pe
    list_scenario = ["1-in-11", "1-in-22", "1-in-33", "1-in-55", "1-in-110", "1-in-1,000", "1-in-10,000",
                     "1-in-100,000", "1-in-1,000,000"]

    import matplotlib.pyplot as pltps
    import numpy as np
    import matplotlib

    matplotlib.rcParams['figure.figsize'] = [10, 10]  # for square canvas
    # matplotlib.rcParams['font.size'] = 8.0
    # plt.style.use('ggplot')
    # plt.style.use('dark_background')
    plt.style.use('seaborn-bright')
    style_list = ['default', 'classic', 'Solarize_Light2', 'bmh', 'dark_background', 'fast', 'fivethirtyeight',
                  'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark',
                  'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook',
                  'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white',
                  'seaborn-whitegrid', 'tableau-colorblind10']
    for i in style_list:
        plt.style.use(i)
        if i == 'seaborn-bright':
            break

    plt.style.use('bmh')
    plt.style.use('default')
    plt.style.use('seaborn-bright')
    fig, axs = plt.subplots(3, 3)

    for k in range(len(list_product)):
        list_sectors[list_product[k]] = top5_list[k]
    # create a horizontal plot
    # 9ÂõæÈÅçÂéÜ
    for i in range(3):
        for j in range(3):

            # ËÆ°ÁÆóÊï∞ÂÄº
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales[i * 3 + j]
            u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
            u_max = max(u_vec)
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)

            n_color = 0
            for k in list_product[:5]:
                a, b = time, qt_vec[k, :]
                b = list(map(abs, b))

                a = a[5:]
                b = b[5:]
                axs[i, j].plot(a, b, label=f"{list_sectors[k]}",
                               path_effects=[pe.Stroke(linewidth=3, foreground='g'), pe.Normal()],
                               color=color_list[n_color], linewidth=1.5)
                n_color += 1
                axs[i, j].spines['top'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
                axs[i, j].spines['right'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
                axs[i, j].set_title(f"{list_scenario[i * 3 + j]}")
                axs[i, j].set_xlim(0, time[-1])
                T_scales = np.array(
                    [24, 24 * 7, 24 * 30, 24 * 30 * 2, 24 * 30 * 6, 24 * 30 * 12, 24 * 30 * 12 * 2, 24 * 30 * 12 * 5,
                     24 * 30 * 12 * 10])
                # axs[i, j].set_xticks([0,400,800],["0",'12h',"24h"])
                axs[0, 0].set_xticks([0, T_scales[0] / 2, T_scales[0]], ["0", "12h", "24h"])
                axs[0, 1].set_xticks([0, T_scales[1] / 2, T_scales[1]], ["0", "0.5w", "1w"])
                axs[0, 2].set_xticks([0, T_scales[2] / 2, T_scales[2]], ["0", "0.5m", "1m"])
                axs[1, 0].set_xticks([0, T_scales[3] / 2, T_scales[3]], ["0", "1m", "2m"])
                axs[1, 1].set_xticks([0, T_scales[4] / 2, T_scales[4]], ["0", "3", "6m"])
                axs[1, 2].set_xticks([0, T_scales[5] / 2, T_scales[5]], ["0", "0.5y", "1y"])
                axs[2, 0].set_xticks([0, T_scales[6] / 2, T_scales[6]], ["0", "1y", "2y"])
                axs[2, 1].set_xticks([0, T_scales[7] / 2, T_scales[7]], ["0", "2.5y", "5y"])
                axs[2, 2].set_xticks([0, T_scales[8] / 2, T_scales[8]], ["0", "5y", "10y"])

                import math
                rate = 0.7
                axs[i, j].set_aspect(rate * time[-1] / (math.ceil(qt_vec[49, :][5] * 10) / 10), adjustable='box')
                axs[i, j].set_yticks([math.ceil(qt_vec[49, :][5] * 10) / 10 * l / 5 for l in range(6)])

                # axs[0, 0].set_aspect(rate * 24 / (0.02), adjustable='box')
                # axs[0, 0].set_ylim(0,0.02)
                # axs[0, 0].set_yticks([0.02 * l / 5 for l in range(6)])

                sup_y = 0.02
                axs[0, 0].set_aspect(rate * 24 / sup_y, adjustable='box')
                axs[0, 0].set_ylim(0, sup_y)
                axs[0, 0].set_yticks([sup_y * l / 5 for l in range(6)])

                # sup_y = 0.04
                # axs[0, 1].set_aspect(rate * 24 * 7 / (sup_y), adjustable='box')
                # axs[0, 1].set_ylim(0, sup_y)
                # axs[0, 1].set_yticks([sup_y * l / 5 for l in range(6)])
                #
                # sup_y = 0.05
                # axs[0, 2].set_aspect(rate * 24 * 30 / (sup_y), adjustable='box')
                # axs[0, 2].set_ylim(0, sup_y)
                # axs[0, 2].set_yticks([sup_y * l / 5 for l in range(6)])
                #
                # sup_y = 0.08
                # axs[1, 0].set_aspect(rate * 24 * 30 * 2 / (sup_y), adjustable='box')
                # axs[1, 0].set_ylim(0, sup_y)
                # axs[1, 0].set_yticks([sup_y * l / 5 for l in range(6)])

                # axs[1, 0].set_yticks([0.15 * l / 5 for l in range(6)])
                # axs[0, 0].set_xlim(0, 1000)
                # axs[0, 0].set_ylim(0, 0.075)
                # axs[1, 0].set_xlim(0, 1200)
                # axs[1, 1].set_xlim(0, 1200)
                # axs[1, 2].set_xlim(0, 1200)
                # axs[2, 0].set_xlim(0, 1200)
                # axs[2, 1].set_xlim(0, 1200)
                # axs[2, 2].set_xlim(0, 1200)
                axs[2, 1].set_xlabel("Time")
                axs[1, 0].set_ylabel("Inoperability")

    plt.subplots_adjust(wspace=.1, hspace=0.7)

    plt.legend(bbox_to_anchor=(0.6, 3.69), loc=3, borderaxespad=0, prop={'size': 6})
    fig.savefig("figure/Time series of 5 Industries with the Largest Loss", dpi=500, bbox_inches='tight')
    # plt.savefig('test.png', facecolor=fig.get_facecolor())
    # plt.grid(b=True, axis='y', linewidth=0.3)
    plt.show()
    print("Image generated:\n",
          "figure/Time series of 5 Industries with the Largest Loss")
    return 0

def Histogram_Loss_graph(list_sectors,product_lost5,T_scales,qe_scales,qT_vec,x_vec, c_vec, Z_mat,qe_scales_pos,qe_scales_neg):
    # ÁîªÊü±Âõæ LOST

    color_list = ["#F2ECFF", "#A7BCDA", "#D2B18C", "#E23735", "#474747"]
    list_scenario = ["1-in-11", "1-in-22", "1-in-33", "1-in-55", "1-in-110", "1-in-1,000", "1-in-10,000",
                     "1-in-100,000", "1-in-1,000,000"]
    # #Ëá™ÈÄâÁªòÂà∂Âπ∂ËÆæÁΩÆÁÆÄÁß∞
    # list_product = [49, 50, 55, 3, 93] #ÈÄâÊã©ÁªòÂà∂ÁöÑË°å‰∏ö‰∏ãÊ†á
    # top5_list = ["Electricity","Gas","Construction","Mine","Health",]#ËÆæÁΩÆÁÆÄÁß∞

    # Êåâ‰∏äÈÉ®ËÆ°ÁÆóÁªòÂà∂
    list_product = product_lost5
    top5_list = [list_sectors[product_lost5[i]] for i in range(len(product_lost5))]

    list_name_Simple = ["ELEC", "Gas", "COST", "WHSL", "RETA"]

    o = 0
    for product in list_product:
        list_sectors[product] = list_name_Simple[o]
        o += 1

    plt.rcParams['figure.figsize'] = [10, 10]  # for square canvas
    # matplotlib.rcParams['font.size'] = 8.0
    # plt.style.use('ggplot')
    # plt.style.use('dark_background')

    style_list = ['default', 'classic', 'Solarize_Light2', 'bmh', 'dark_background', 'fast', 'fivethirtyeight',
                  'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark',
                  'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook',
                  'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white',
                  'seaborn-whitegrid', 'tableau-colorblind10']
    for i in style_list:
        plt.style.use(i)
        if i == 'bmh':
            break
    plt.style.use('default')
    # plt.style.use('bmh')
    plt.style.use('seaborn-bright')
    # plt.style.use('default')
    # plt.style.use('seaborn-bright')
    # plt.style.use(style)

    fig, axs = plt.subplots(3, 3)

    # temple_data = [[0.05981721124626788, 0.004011974202569095, 0.003120511888988286, 0.00028719112779336227, 0.009743044421869466, 7.306277752469083e-05, 0.037771737303445636, 0.019436136119719633, 0.004347841376404762, 0.01025810358204936, 0.013973683657693803, 0.015454196045569073, 0.027293843818517207, 0.01065839161879223, 0.016758103170647843, 0.006507448744784341, 0.005919536673836846, 0.0013085522514758826, 0.0003656017638384068, 0.015834531239683758, 0.022012723199011496, 0.01628379856693182, 0.025879637109794327, 0.003728486295132801, 0.005614388101380219, 0.003146644345062854, 0.01615023536283217, 0.023607487529038487, 0.006417746252682822, 0.03805559188432282, 0.03912038596527025, 0.026345610522681726, 0.01450681941264255, 0.005504963191223603, 0.010217265814727303, 0.005329857537824372, 0.0292131255061121, 0.024283482527391875, 0.007144167110946697, 0.007842057069429217, 0.01577321793379283, 0.00032848268505471776, 0.0013054526426893992, 0.003915988180453419, 0.004332466378810895, 0.0049070384341252625, 1.0491287601905666e-05, 6.9630444216543535e-06, 0.04461183250873476, 3.252269456162242, 1.599492411944449, 0.02691958019839977, 0.013573566330853985, 0.01989568148206336, 0.0011955986347009706, 0.3973793436109976, 0.055220519565140846, 0.1858530953782782, 0.11398388527772225, 0.013594013777764811, 0.09044346967371757, 0.0002535882537418696, 0.0028459816071374675, 0.07140156377088162, 0.006478293585447862, 0.021920844561124645, 0.05879347055673868, 0.0041302077472258674, 0.013292680938241192, 0.014937659179817776, 0.02595276324643456, 0.010994876310637478, 0.04733728815200464, 0.013955861284036416, 0.0005595105357978241, 0.002424826723268002, 0.11042172381027529, 0.03334685121239045, 0.02806683798566224, 0.03689782598992191, 0.04405038232173341, 0.021778497423824508, 0.044448978024182566, 0.038756758551059534, 0.0023687844003614186, 0.02306983426784903, 0.026047473883584582, 0.005703510225332203, 0.007276984203932856, 0.03468279055106315, 0.03482842485741782, 0.045678635232562735, 0.055327035453452404, 0.022953581328020476, 0.06978964044999234], [0.3788852414263617, 0.026958502261461254, 0.013959214773185739, 0.009316508499288867, 0.06747860317501271, 0.0014804599090019245, 0.24301728659004956, 0.12531232484475607, 0.027904430960505048, 0.06869771853105995, 0.08601921721482397, 0.09415830956643782, 0.17213314471950597, 0.06777499663166037, 0.09178969482559128, 0.04267923659997491, 0.03555425553803725, 0.00763384275029737, 0.002851755071694335, 0.13617683756637716, 0.16501127491261366, 0.1353021149111653, 0.25336108474788144, 0.035361540613385124, 0.03515737492775003, 0.01805561151704659, 0.07222640201751199, 0.1519992568805713, 0.04077488144673225, 0.20988438856707195, 0.2712192065093042, 0.18878499502383594, 0.09331662608326602, 0.0446051413314995, 0.07690175669466717, 0.037426904453934304, 0.3018645809204511, 0.1844076171617315, 0.08383846200804675, 0.20187631295894445, 0.11349059470866489, 0.008076029864304038, 0.013092809815983958, 0.02635323681000215, 0.026243562172253047, 0.03844131748221364, 0.0002795786160240018, 0.00012354071593139465, 0.4881443965964477, 8.478841261583648, 4.214803260179475, 0.14932841625294174, 0.10169800496198375, 0.15906415471929888, 0.01393270689339934, 3.163778560069921, 0.5216464320239016, 1.5380970630458402, 0.6287990602214845, 0.07968755545984298, 0.7940368667683552, 0.02260814949177698, 0.11703692543079722, 0.6236299013809503, 0.17211214323294993, 0.14389028840957915, 0.32083090883993914, 0.030922335321025975, 0.1062191604626489, 0.1821250919734252, 0.4776026496664635, 0.10228792337805605, 0.8459003074995339, 0.3344091317613562, 0.012121888313291354, 0.016942632202454032, 0.8921077668866872, 0.41036665614424384, 0.3385067195450622, 0.3984810746167078, 0.44953713567640585, 0.17389204334591493, 0.5646348947442255, 0.3510293796363327, 0.014863244275236002, 0.3539084120465209, 0.6979636408534766, 0.0548051857932816, 0.09529870397364373, 0.3158519035588286, 0.2905835588822305, 0.3129399428328461, 0.44599347817990265, 0.11306924364856906, 0.3438932096465771], [0.5289191702554753, 0.03798476292215373, 0.01771216526721896, 0.32259692324952927, 0.09351406987042614, 0.04661366370320044, 0.34201588892830176, 0.17673329037639696, 0.03912205690568226, 0.09744863392809293, 0.11998624266163513, 0.1322164533029386, 0.24167628551483986, 0.09451839884181698, 0.12714219055482512, 0.06043290584589451, 0.04940575796595398, 0.010649807502604268, 0.004175155246102953, 0.1934282042636391, 0.23729096943365763, 0.19821191926027673, 0.37399752613279696, 0.051595329911482364, 0.049328280298784284, 0.024964983269275872, 0.09378728891665203, 0.21365707448889015, 0.05680099887111262, 0.28813678574657214, 0.3831919943547378, 0.26193140326843267, 0.12952067319408558, 0.06624466009384379, 0.10738315074673581, 0.05289320388194241, 0.4462374682626968, 0.2612599752053285, 0.12423751382716931, 0.3567358975400762, 0.1632299632928336, 0.032884728366891026, 0.02010181330133387, 0.036970648942610575, 0.03654829461610276, 0.05638146184249126, 0.0031124487720220334, 0.0002089014877326533, 0.7029302341248048, 10.182811075663071, 5.03736933144678, 0.20566177467416738, 0.14503631853559784, 0.2291022606993347, 0.020371632811896172, 4.418694488311145, 0.7681842005328476, 2.2157084572943515, 0.868853746644446, 0.11280912595195246, 1.1475803620337208, 0.04950788901300076, 0.20560136800861467, 0.909368224597651, 0.2827550830231818, 0.21036921411721907, 0.4450964043045441, 0.04463780519838555, 0.15389817187688498, 0.28484969945159555, 0.7575022116237697, 0.15145013405602567, 1.3253827149844295, 0.5135565604495357, 0.021050317837162547, 0.024854103777336406, 1.2839477186947825, 0.6143776745845821, 0.498875230556834, 0.5847507214240855, 0.6527880360106703, 0.2512860534249457, 0.8434892708338922, 0.5130924657577725, 0.020683751347678195, 0.5438591296042136, 1.069618785148192, 0.0887804232164043, 0.14138058186736316, 0.45902833235328305, 0.42355968761296453, 0.4420153348309505, 0.6490097644582509, 0.15397612815226486, 0.4669637008227774], [0.7247503223506031, 0.05245072738692102, 0.02218287235429094, 0.646887082466335, 0.1266966647469888, 0.2577527194323403, 0.4717536312297348, 0.2443587118778611, 0.0537716186054058, 0.13565870796294038, 0.16429869076501807, 0.1821851756201467, 0.3331479502759389, 0.12933892819791853, 0.17353261194290173, 0.0840177095997081, 0.06736375238774533, 0.014603258774565947, 0.005983699560221721, 0.2672292684285644, 0.33423528749544296, 0.2837464818514768, 0.5338171883072484, 0.07311126627412035, 0.0679786092624844, 0.03389674324036362, 0.12030925154741733, 0.2943017223338526, 0.07765675393576726, 0.3881708062039059, 0.5300217600656639, 0.3552220906059071, 0.17607174762569272, 0.09583385196453931, 0.1463275534925034, 0.0730997296063696, 0.6366085773083721, 0.36192478105773707, 0.17777470501105544, 0.5599920414098177, 0.22921972269513907, 0.07366702758918817, 0.030442616726392917, 0.050714615216554924, 0.049879295887904414, 0.0810365009575934, 0.014393945268289637, 0.0003433461909427852, 0.9774199935209982, 12.168757081991885, 5.9902252978682915, 0.27826806598396814, 0.2019313207225152, 0.3218351965738172, 0.02886289645453496, 6.024022558426048, 1.0956664915283816, 3.1057893862618946, 1.1793678558994225, 0.1562921154211139, 1.6144355303008542, 0.09058522309614364, 0.3367097019360191, 1.2908423984679858, 0.44539155514430345, 0.30331186260007953, 0.6074225265101922, 0.06310694891222533, 0.21740922317613634, 0.4350022416250676, 1.1581473325553837, 0.2194021470208105, 1.9823520227855316, 0.7549126094488814, 0.03548248040740722, 0.035877817380681555, 1.8035503990207018, 0.888443081311938, 0.7129007377718207, 0.8327457976859359, 0.9190383903903465, 0.3540280751786271, 1.2181980468951175, 0.7296931783233809, 0.02825579930674493, 0.7985988318380782, 1.5603821827997215, 0.14176309823243735, 0.20251990722075253, 0.6502169766793224, 0.6021208851189861, 0.6109194154311082, 0.9220397163150504, 0.20595602663969342, 0.6237579740055182], [1.0155881651609762, 0.0740121187256047, 0.028335768277562224, 0.9691204446763003, 0.1749169077055807, 0.4890763923595115, 0.6648052286165044, 0.3453005855679501, 0.07551465355786739, 0.19333151890208833, 0.23005345720674486, 0.2566185683126442, 0.46978823239220063, 0.18096130654558173, 0.24275811773524442, 0.11959569197801899, 0.0938640882450978, 0.020492114924716944, 0.008807816841342032, 0.37530565293026125, 0.4822918122429589, 0.41578266291801974, 0.7724546302633918, 0.10542840436991638, 0.09589040070944382, 0.0470581123157882, 0.157830976287293, 0.41452642685288366, 0.10856670855689765, 0.5334536718076458, 0.7495045232071597, 0.4908809851772857, 0.2443235702373439, 0.1416348963434741, 0.20305546362505494, 0.10314304502377644, 0.9197090711966845, 0.5121269874087919, 0.25868011795219614, 0.83824057392118, 0.32821923118701485, 0.12785248573849226, 0.04812215589634594, 0.07093174647527631, 0.06947120993106716, 0.11944412314103495, 0.03204620628421684, 0.0005860974864836893, 1.3734395108470414, 14.839926960638007, 7.265935349785688, 0.38477473388590455, 0.2867378791555297, 0.46110984398970256, 0.041580929860929546, 8.363621309816322, 1.586187169694481, 4.431549835904831, 1.63628667021881, 0.2207237230417566, 2.3142893191396934, 0.15407288007437556, 0.5499339937607735, 1.86768061244041, 0.7194520233129432, 0.4510709040481701, 0.8483553354390997, 0.09150379129663684, 0.31339127352248825, 0.6888105746465804, 1.8131957529319696, 0.3273766086707291, 2.990429930275935, 1.1221058345170434, 0.06294176043454368, 0.05350611826339595, 2.5858006810141063, 1.303763839260926, 1.0374777656611989, 1.2075305563423395, 1.3148757487212857, 0.5089444574682838, 1.7879675351244357, 1.0578780167069775, 0.03947403266363356, 1.180873195596044, 2.2891374768631443, 0.23391495537978949, 0.29436870611626964, 0.9402229449823806, 0.8737631189042732, 0.8623946526848557, 1.3386814123643207, 0.28092824982583803, 0.8506864994546073], [2.1086845595960706, 0.15536608084710354, 0.0493132510954939, 1.7168604825219556, 0.3515032671579194, 1.0364870413941363, 1.39234452352106, 0.726918779367848, 0.157105578429558, 0.41451460757590713, 0.47681482536433134, 0.537041331367957, 0.9859690042983901, 0.37471231057188725, 0.5040494375740324, 0.2557440886440594, 0.1928236274980325, 0.042636941984888516, 0.020407364032777417, 0.7735731800979483, 1.063557038585873, 0.9405516758736008, 1.671654701326248, 0.22878538892988665, 0.20180494473435345, 0.09616822211036488, 0.29065913530643783, 0.8739562662935693, 0.22448042194338547, 1.0617502386642856, 1.591162298247715, 0.9874324743568174, 0.49800713223327164, 0.32723824721718014, 0.4127538076739731, 0.2168352312130886, 1.9865535088108865, 1.0838764211914955, 0.5799325836004942, 1.7307675986776083, 0.7030001311420783, 0.287358445298133, 0.1338370473622109, 0.14611119601022646, 0.14196264740158968, 0.2729957431328578, 0.08192826949159003, 0.0018836284298370427, 2.7973652770018322, 23.61255761363852, 11.434219960734083, 0.779340852144863, 0.6077569506418701, 0.9938269523443426, 0.09015766077774406, 16.95104420343338, 3.4411890377001444, 9.462744869862414, 3.3409436788923093, 0.46060132268016524, 4.991135195424227, 0.3854451774041234, 1.4313378331403193, 4.093503678609443, 2.0136811736969706, 1.0621738069280056, 1.7517713741752903, 0.20604130996235712, 0.6833190880703325, 1.9231470075475146, 4.725137850949286, 0.7863784211294823, 6.92754832504061, 2.544230777310707, 0.29742343115734726, 0.12898382292121943, 5.587436343271762, 2.898340912372422, 2.2976733618502987, 2.6548654524145534, 2.816951078600659, 1.1069661276964755, 3.998381429450606, 2.326745670945462, 0.08151761874778259, 2.621533778449878, 5.012801840621357, 0.6585347069749788, 0.6443079229094771, 2.0622163918297147, 1.9276726439053897, 1.8161307683858277, 2.965103922047099, 0.550513694263608, 1.670679044907305], [3.2354207743432184, 0.23945524475915497, 0.06941158881042539, 2.321850491980972, 0.5316418938306882, 1.4692493745028217, 2.1461199263500994, 1.1223412709455143, 0.241128765445964, 0.6448944798054892, 0.7308326820944514, 0.8269226001941979, 1.5182660172863491, 0.5744040930964552, 0.7728293877104648, 0.39694376523222435, 0.29489986964432163, 0.06537429461144702, 0.03326209986798808, 1.1801220924312148, 1.6817126430590719, 1.5024442087091268, 2.605707249452342, 0.3580033873465871, 0.3114802253771934, 0.1467480029921017, 0.4220764080989762, 1.362299237525215, 0.34375482927889056, 1.5944679193082634, 2.4866756481673806, 1.492233479535896, 0.7604440551945786, 0.5385312477091719, 0.6327271279171545, 0.3357441008967461, 3.1148487522603276, 1.6838363934330427, 0.9433898969288593, 2.5642547301120455, 1.0904852914359187, 0.42899594673314395, 0.24755818666593343, 0.2237587571183475, 0.21606517120046778, 0.435478005299461, 0.12279264589326616, 0.003768409085161116, 4.2402510417548855, 31.781976976526312, 15.304844119548633, 1.1845018417314275, 0.942760267546679, 1.5542675925686367, 0.1412866350370091, 25.703075216319647, 5.368501202815174, 14.781810686456174, 5.114004595578069, 0.7066666553243404, 7.81828841607767, 0.6163061216747787, 2.385181402499275, 6.451147180473505, 3.5698823235747605, 1.7223825299691369, 2.6802723388044214, 0.33372036507052155, 1.0724880878621368, 3.4506984171335944, 8.117051166921934, 1.2983072655429464, 11.135482307035316, 4.042164506828496, 7.435860379150232, 0.21321975862283915, 8.742502641125228, 4.563988449783543, 3.6302551911084655, 4.1840543866760775, 4.414555674751692, 1.7419873572882465, 6.334260311216986, 3.665636872586154, 0.12476003047327537, 4.115667481097659, 7.8324433704277885, 1.1442390624565262, 1.008910272073593, 3.23964060926138, 3.0385684118570193, 2.8162072305427013, 4.6864318223844625, 0.8199325573185936, 2.492058698929006], [4.111474193502544, 0.3049220122524455, 0.08448010306313349, 2.7621990246684933, 0.671918594612708, 1.7791320878203043, 2.734949705119983, 1.4307498264999507, 0.3064427334384321, 0.8243600305970837, 0.9281860933058241, 1.0528634840937952, 1.9314683901180825, 0.7297262271901007, 0.9808153183646954, 0.5065411022920605, 0.3746328521510939, 0.08299395220436337, 0.043594362354371696, 1.4960243574832532, 2.168361187736872, 1.945794162375657, 3.3385879685686057, 0.45965626297332896, 0.3968352671683644, 0.18617589870675627, 0.5224383966529689, 1.7528857419473378, 0.4364039483085271, 2.0055027350479535, 3.2020025773604326, 1.8837762930519404, 0.9665857816907043, 0.7184845924462826, 0.8108974436545251, 0.42947689585306764, 4.025239540415237, 2.156758227397997, 1.2515847617976403, 3.197207605459293, 1.3924041178431663, 0.534648512313027, 0.3542394352843905, 0.2846682086234532, 0.27364339522337194, 0.5613996959299072, 0.15213008242346684, 0.005634267063359026, 5.3707266999921, 37.86564508199721, 18.185056372345787, 1.5004960973064585, 1.206221108213616, 1.9969202653089015, 0.18170443469334727, 32.501286385955666, 6.878936839930105, 19.030616405910994, 6.515186414936211, 0.8981024235764152, 10.061449046272736, 0.7938618753734855, 3.134323826768623, 8.319959457574706, 4.810520821283456, 2.236184864156594, 3.400566151030822, 0.43839311421484956, 1.3783237692980632, 4.665222260743145, 10.845333768508105, 1.700905012999802, 14.487571561945435, 5.219028908273513, 13.351190982524624, 0.27921079214914807, 11.225333464444416, 5.865958015788984, 4.6783296497903475, 5.38965631378035, 5.702762661075653, 2.2459835125610628, 8.174014267279688, 4.720203690321498, 0.15834173007556243, 5.286966708818886, 10.046165408018322, 1.5238714321669313, 1.2941780674745766, 4.1604966137560755, 3.9104725393803452, 3.606012809332915, 6.03988826134963, 1.0269230178571382, 3.123134421117565], [4.736934310352659, 0.3516928483555221, 0.09502979577691266, 3.069917724325299, 0.7723779240170924, 1.992699127663149, 3.156673420204854, 1.6513290852772466, 0.35307011766639834, 0.9525070456302116, 1.0690239431203539, 1.2144366226158265, 2.2260860306413477, 0.8406514031893673, 1.128757602523961, 0.5846211114550155, 0.43178900047266205, 0.09555160897719893, 0.05109596286789871, 1.7217929468645092, 2.5178310775320147, 2.264491959882455, 3.8652389982939326, 0.5327883950733063, 0.4577979956957719, 0.21439453946425463, 0.5934598686075969, 2.03753163888615, 0.5025153743228965, 2.2980828637946136, 3.7224534637877724, 2.1633594138319387, 1.1150139488506348, 0.856790673661666, 0.9433030592891566, 0.49705456321854036, 4.695934712882732, 2.497456848839556, 1.4870576104403606, 3.6467854446059826, 1.608334813504234, 0.6089162174523838, 0.4421221153063972, 0.32848541073245185, 0.3147890924038763, 0.6507463127767665, 0.1723487673578476, 0.007233624226086156, 6.185972238022814, 42.141823685192634, 20.208896427426932, 1.7268382496976566, 1.3958460697168036, 2.3163128448908, 0.21088758743684724, 37.35943043870586, 7.9634375106586965, 22.125964238960627, 7.529077360003609, 1.034945009598342, 11.685454426461378, 0.9199386970589247, 3.669519359889537, 9.671019683180457, 5.692545321089532, 2.6008736209581254, 3.9140526499635175, 0.515707366678843, 1.597985159966509, 5.522202057566606, 12.806905304125532, 1.9874401794305907, 16.916545848382157, 6.0639765560866525, 16.74399459696461, 0.3260352106980226, 13.010838500932172, 6.7977636080184665, 5.430797969692528, 6.257105272624339, 6.649317214397374, 2.61051959902161, 9.496902347468867, 5.478771272622313, 0.1823013220568197, 6.128101436924045, 11.638623095482297, 1.791946167923023, 1.498626749947337, 4.819530792111678, 4.5357400922338655, 4.176090220319878, 7.0116368822150825, 1.1739335402110196, 3.571190626756185]]
    # temple_data = [[],[],[],[]]
    # create a horizontal plot
    # 9ÂõæÈÅçÂéÜ
    for i in range(3):
        for j in range(3):
            # ËÆ°ÁÆóËØØÂ∑ÆÊ£í
            print(list_scenario[i * 3 + j],"\nInoperablity:",qe_scales[i * 3 + j])
            u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
            u_max = max(u_vec)

            # ‰πêËßÇ
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales_pos[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss_pos = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            print("pos:",q0_elec)
            pos = q0_elec
            print("total loss pos:", sum(Q_loss_pos),sum(Q_loss_pos)/sum(x_vec))
            # ÊÇ≤ËßÇ#21146.27 * 100
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales_neg[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss_neg = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            print("neg:", q0_elec)
            neg = q0_elec
            print("total loss neg:", sum(Q_loss_neg),sum(Q_loss_neg)/sum(x_vec))
            Q_loss_errbar = [abs(x - y) for x, y in zip(Q_loss_pos, Q_loss_neg)]
            Q_loss_errbar_top5 = [Q_loss_errbar[product] for product in list_product]

            # Âπ≥ÂùáËÆ°ÁÆóÊï∞ÂÄº
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            n_color = 0
            # for k in list_product:

            print("total loss:",sum(Q_loss),sum(Q_loss)/sum(x_vec))

            list_inoperability = Q_loss

            # list_inoperability = temple_data[1][i * 3 + j]
            #
            b = [list_inoperability[product] for product in list_product]
            b = list(map(abs, b))
            print("b",b)
            print("b_err",Q_loss_errbar_top5,"\n\n")
            #2.48  /  1.72e-04\% &1.00&0.43&0.12&0.12&0.08
            def re_3(num):

                num_str = "{:.3g}".format(num)
                num_latex = r"\num{" + num_str + r"}"
                return num_latex


            def approximate(num1,num2):
                exponent1 = int(f'{num1:.2e}'.split('e')[1])  # ÂÅáËÆæË¶Å‰øùÁïô2‰ΩçÂ∞èÊï∞
                exponent2 = int(f'{num2:.2e}'.split('e')[1])  # ÂÅáËÆæË¶Å‰øùÁïô2‰ΩçÂ∞èÊï∞
                if exponent1 < 0:
                    return f"$({round(num1 / 10**exponent1,2)} \pm {round(num2 / 10**exponent1,2)})"+ r"\times\num{e-0"+f"{abs(exponent1)}"+r"}$"
                else:
                    digit_difference = exponent1 - exponent2
                    return f"$({round(num1 / 10 ** exponent1, 2)} \pm {round(num2 / 10 ** exponent1, 2)})" + r"\times\num{e+0" + f"{exponent1}" + r"}$"
            # print('latex table:\n',f"{re_3(sum(Q_loss))}{round(sum(Q_loss),2)}  /  {round(100*sum(Q_loss)/sum(x_vec),2)}\% &{round(b[0],2)}&{round(b[1],2)} & {round(b[2],2)} & {round(b[3],2)} & {round(b[4],2)}")
            #$0. 234\pm0.258$  & \num{1.23e+04}  /  65.86\% &130100&61032 & 79129 & 50367 & 21053
            print(approximate(1234.5645,325.454))
            # print('latex table:\n',
            #       f"${re_3(qe_scales[i * 3 + j])}\pm{re_3((neg-pos)/2)}$",
            #       f"& ${re_3(sum(Q_loss))}\pm{re_3(sum(Q_loss_neg) - sum(Q_loss_pos))}$",
            #       f"& ${re_3(sum(Q_loss)/sum(x_vec))}\pm{re_3(sum(Q_loss_neg)/sum(x_vec) - sum(Q_loss_pos)/sum(x_vec))}$\%",
            #       f"& ${re_3(b[0])}\pm{re_3(Q_loss_errbar_top5[0] / 2)}$",
            #       f"& ${re_3(b[1])}\pm{re_3(Q_loss_errbar_top5[1] / 2)}$",
            #       f"& ${re_3(b[2])}\pm{re_3(Q_loss_errbar_top5[2] / 2)}$",
            #       f"& ${re_3(b[3])}\pm{re_3(Q_loss_errbar_top5[3] / 2)}$",
            #       f"& ${re_3(b[4])}\pm{re_3(Q_loss_errbar_top5[4] / 2)}$",
            #       )
            print('latex table 2:\n',
                  f"{approximate(qe_scales[i * 3 + j],(neg-pos)/2)}",
                  f"& {approximate(sum(Q_loss),(sum(Q_loss_neg) - sum(Q_loss_pos))/2)}",
                  f"& {approximate(sum(Q_loss)/sum(x_vec),(sum(Q_loss_neg)/sum(x_vec) - sum(Q_loss_pos)/sum(x_vec))/2)}\%",
                  # f"& {approximate(b[0],Q_loss_errbar_top5[0] / 2)}",
                  # f"& {approximate(b[1],Q_loss_errbar_top5[1] / 2)}",
                  # f"& {approximate(b[2],Q_loss_errbar_top5[2] / 2)}",
                  # f"& {approximate(b[3],Q_loss_errbar_top5[3] / 2)}",
                  # f"& {approximate(b[4],Q_loss_errbar_top5[4] / 2)}",
                  )




            axs[i, j].barh(list_name_Simple, b, xerr=Q_loss_errbar_top5, capsize=2.5, align='center', color=color_list,
                           height=0.75, edgecolor="#4b4453", linewidth=1.5)
            # color_list[n_color]
            n_color += 1
            axs[i, j].spines['top'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
            axs[i, j].spines['right'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
            axs[i, j].set_title(f"{list_scenario[i * 3 + j]}")
            # axs[i, j].set_xticks([math.ceil(max(b) / 10) * 10 * l / 2 for l in range(3)], color="black")
            axs[i, j].set_xticks([math.ceil(max(b) / 10) * 10 * l / 2 for l in range(3)])
            axs[i, j].set_xticklabels([math.ceil(max(b) / 10) * 10 * l / 2 for l in range(3)], color="black")
            axs[0, 0].set_xlim(0, 2)
            axs[0,0].set_xticks([0,1,2])
            axs[0, 0].set_xticklabels([0,1,2], color="black")
            axs[2, 0].set_xlim(0, 22000)
            axs[2, 0].set_xticks([0 ,20000])
            axs[2, 0].set_xticklabels([0, 20000], color="black")
            axs[2, 1].set_xlim(0, 69000)
            axs[2, 1].set_xticks([0, 60000])
            axs[2, 1].set_xticklabels([0, 60000], color="black")
            axs[2, 2].set_xlim(0, 140000)
            axs[2, 2].set_xticks([0, 130000])
            axs[2, 2].set_xticklabels([0, 130000], color="black")
            # plt.yticks(rotation=30)
            # axs[i, j].set_yticks( color="black")
            axs[i, j].tick_params(axis='x', colors='black')
            axs[i, j].tick_params(axis='y', colors='black')
            # axs[i, j].set_xlim(0,720)
            # axs[i, j].set_xticks([0,720])
            axs[2, 1].set_xlabel("Lost", color="black")
            axs[1, 0].set_ylabel("Industry", color="black")

    plt.subplots_adjust(wspace=1, hspace=0.7)
    # plt.legend(bbox_to_anchor=(1.2, 1.7), loc=3, borderaxespad=0)
    # plt.title(f"{style}")
    # fig.savefig(f"figure/Histogram Chart of 5 Industries with the Largest Loss", dpi=500, bbox_inches='tight')
    plt.show()
    print("Image generated:\n",
          "figure/Histogram Chart of 5 Industries with the Largest Loss")
    return  0


# def Histogram_Loss_GDP_graph(list_sectors,product_lost5,T_scales,qe_scales,qT_vec,x_vec, c_vec, Z_mat,qe_scales_pos,qe_scales_neg):
#     # ÁîªÊü±Âõæ LOST / this section's gpd
#
#     print("qe_scales:",qe_scales)
#     color_list = ["#F2ECFF", "#A7BCDA", "#D2B18C", "#E23735", "#474747"]
#     list_scenario = ["1-in-11", "1-in-22", "1-in-33", "1-in-55", "1-in-110", "1-in-1,000", "1-in-10,000",
#                      "1-in-100,000", "1-in-1,000,000"]
#     # #Ëá™ÈÄâÁªòÂà∂Âπ∂ËÆæÁΩÆÁÆÄÁß∞
#     # list_product = [49, 50, 55, 3, 93] #ÈÄâÊã©ÁªòÂà∂ÁöÑË°å‰∏ö‰∏ãÊ†á
#     # top5_list = ["Electricity","Gas","Construction","Mine","Health",]#ËÆæÁΩÆÁÆÄÁß∞
#
#     # Êåâ‰∏äÈÉ®ËÆ°ÁÆóÁªòÂà∂
#     list_product = product_lost5
#     top5_list = [list_sectors[product_lost5[i]] for i in range(len(product_lost5))]
#
#     list_name_Simple = ["ELEC", "Gas", "COST", "WHSL", "RETA"]
#
#     o = 0
#     for product in list_product:
#         list_sectors[product] = list_name_Simple[o]
#         o += 1
#
#     plt.rcParams['figure.figsize'] = [10, 10]  # for square canvas
#     # matplotlib.rcParams['font.size'] = 8.0
#     # plt.style.use('ggplot')
#     # plt.style.use('dark_background')
#
#     style_list = ['default', 'classic', 'Solarize_Light2', 'bmh', 'dark_background', 'fast', 'fivethirtyeight',
#                   'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark',
#                   'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook',
#                   'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white',
#                   'seaborn-whitegrid', 'tableau-colorblind10']
#     for i in style_list:
#         plt.style.use(i)
#         if i == 'bmh':
#             break
#     plt.style.use('default')
#     # plt.style.use('bmh')
#     plt.style.use('seaborn-bright')
#     # plt.style.use('default')
#     # plt.style.use('seaborn-bright')
#     # plt.style.use(style)
#
#     fig, axs = plt.subplots(3, 3)
#
#     # temple_data = [[0.05981721124626788, 0.004011974202569095, 0.003120511888988286, 0.00028719112779336227, 0.009743044421869466, 7.306277752469083e-05, 0.037771737303445636, 0.019436136119719633, 0.004347841376404762, 0.01025810358204936, 0.013973683657693803, 0.015454196045569073, 0.027293843818517207, 0.01065839161879223, 0.016758103170647843, 0.006507448744784341, 0.005919536673836846, 0.0013085522514758826, 0.0003656017638384068, 0.015834531239683758, 0.022012723199011496, 0.01628379856693182, 0.025879637109794327, 0.003728486295132801, 0.005614388101380219, 0.003146644345062854, 0.01615023536283217, 0.023607487529038487, 0.006417746252682822, 0.03805559188432282, 0.03912038596527025, 0.026345610522681726, 0.01450681941264255, 0.005504963191223603, 0.010217265814727303, 0.005329857537824372, 0.0292131255061121, 0.024283482527391875, 0.007144167110946697, 0.007842057069429217, 0.01577321793379283, 0.00032848268505471776, 0.0013054526426893992, 0.003915988180453419, 0.004332466378810895, 0.0049070384341252625, 1.0491287601905666e-05, 6.9630444216543535e-06, 0.04461183250873476, 3.252269456162242, 1.599492411944449, 0.02691958019839977, 0.013573566330853985, 0.01989568148206336, 0.0011955986347009706, 0.3973793436109976, 0.055220519565140846, 0.1858530953782782, 0.11398388527772225, 0.013594013777764811, 0.09044346967371757, 0.0002535882537418696, 0.0028459816071374675, 0.07140156377088162, 0.006478293585447862, 0.021920844561124645, 0.05879347055673868, 0.0041302077472258674, 0.013292680938241192, 0.014937659179817776, 0.02595276324643456, 0.010994876310637478, 0.04733728815200464, 0.013955861284036416, 0.0005595105357978241, 0.002424826723268002, 0.11042172381027529, 0.03334685121239045, 0.02806683798566224, 0.03689782598992191, 0.04405038232173341, 0.021778497423824508, 0.044448978024182566, 0.038756758551059534, 0.0023687844003614186, 0.02306983426784903, 0.026047473883584582, 0.005703510225332203, 0.007276984203932856, 0.03468279055106315, 0.03482842485741782, 0.045678635232562735, 0.055327035453452404, 0.022953581328020476, 0.06978964044999234], [0.3788852414263617, 0.026958502261461254, 0.013959214773185739, 0.009316508499288867, 0.06747860317501271, 0.0014804599090019245, 0.24301728659004956, 0.12531232484475607, 0.027904430960505048, 0.06869771853105995, 0.08601921721482397, 0.09415830956643782, 0.17213314471950597, 0.06777499663166037, 0.09178969482559128, 0.04267923659997491, 0.03555425553803725, 0.00763384275029737, 0.002851755071694335, 0.13617683756637716, 0.16501127491261366, 0.1353021149111653, 0.25336108474788144, 0.035361540613385124, 0.03515737492775003, 0.01805561151704659, 0.07222640201751199, 0.1519992568805713, 0.04077488144673225, 0.20988438856707195, 0.2712192065093042, 0.18878499502383594, 0.09331662608326602, 0.0446051413314995, 0.07690175669466717, 0.037426904453934304, 0.3018645809204511, 0.1844076171617315, 0.08383846200804675, 0.20187631295894445, 0.11349059470866489, 0.008076029864304038, 0.013092809815983958, 0.02635323681000215, 0.026243562172253047, 0.03844131748221364, 0.0002795786160240018, 0.00012354071593139465, 0.4881443965964477, 8.478841261583648, 4.214803260179475, 0.14932841625294174, 0.10169800496198375, 0.15906415471929888, 0.01393270689339934, 3.163778560069921, 0.5216464320239016, 1.5380970630458402, 0.6287990602214845, 0.07968755545984298, 0.7940368667683552, 0.02260814949177698, 0.11703692543079722, 0.6236299013809503, 0.17211214323294993, 0.14389028840957915, 0.32083090883993914, 0.030922335321025975, 0.1062191604626489, 0.1821250919734252, 0.4776026496664635, 0.10228792337805605, 0.8459003074995339, 0.3344091317613562, 0.012121888313291354, 0.016942632202454032, 0.8921077668866872, 0.41036665614424384, 0.3385067195450622, 0.3984810746167078, 0.44953713567640585, 0.17389204334591493, 0.5646348947442255, 0.3510293796363327, 0.014863244275236002, 0.3539084120465209, 0.6979636408534766, 0.0548051857932816, 0.09529870397364373, 0.3158519035588286, 0.2905835588822305, 0.3129399428328461, 0.44599347817990265, 0.11306924364856906, 0.3438932096465771], [0.5289191702554753, 0.03798476292215373, 0.01771216526721896, 0.32259692324952927, 0.09351406987042614, 0.04661366370320044, 0.34201588892830176, 0.17673329037639696, 0.03912205690568226, 0.09744863392809293, 0.11998624266163513, 0.1322164533029386, 0.24167628551483986, 0.09451839884181698, 0.12714219055482512, 0.06043290584589451, 0.04940575796595398, 0.010649807502604268, 0.004175155246102953, 0.1934282042636391, 0.23729096943365763, 0.19821191926027673, 0.37399752613279696, 0.051595329911482364, 0.049328280298784284, 0.024964983269275872, 0.09378728891665203, 0.21365707448889015, 0.05680099887111262, 0.28813678574657214, 0.3831919943547378, 0.26193140326843267, 0.12952067319408558, 0.06624466009384379, 0.10738315074673581, 0.05289320388194241, 0.4462374682626968, 0.2612599752053285, 0.12423751382716931, 0.3567358975400762, 0.1632299632928336, 0.032884728366891026, 0.02010181330133387, 0.036970648942610575, 0.03654829461610276, 0.05638146184249126, 0.0031124487720220334, 0.0002089014877326533, 0.7029302341248048, 10.182811075663071, 5.03736933144678, 0.20566177467416738, 0.14503631853559784, 0.2291022606993347, 0.020371632811896172, 4.418694488311145, 0.7681842005328476, 2.2157084572943515, 0.868853746644446, 0.11280912595195246, 1.1475803620337208, 0.04950788901300076, 0.20560136800861467, 0.909368224597651, 0.2827550830231818, 0.21036921411721907, 0.4450964043045441, 0.04463780519838555, 0.15389817187688498, 0.28484969945159555, 0.7575022116237697, 0.15145013405602567, 1.3253827149844295, 0.5135565604495357, 0.021050317837162547, 0.024854103777336406, 1.2839477186947825, 0.6143776745845821, 0.498875230556834, 0.5847507214240855, 0.6527880360106703, 0.2512860534249457, 0.8434892708338922, 0.5130924657577725, 0.020683751347678195, 0.5438591296042136, 1.069618785148192, 0.0887804232164043, 0.14138058186736316, 0.45902833235328305, 0.42355968761296453, 0.4420153348309505, 0.6490097644582509, 0.15397612815226486, 0.4669637008227774], [0.7247503223506031, 0.05245072738692102, 0.02218287235429094, 0.646887082466335, 0.1266966647469888, 0.2577527194323403, 0.4717536312297348, 0.2443587118778611, 0.0537716186054058, 0.13565870796294038, 0.16429869076501807, 0.1821851756201467, 0.3331479502759389, 0.12933892819791853, 0.17353261194290173, 0.0840177095997081, 0.06736375238774533, 0.014603258774565947, 0.005983699560221721, 0.2672292684285644, 0.33423528749544296, 0.2837464818514768, 0.5338171883072484, 0.07311126627412035, 0.0679786092624844, 0.03389674324036362, 0.12030925154741733, 0.2943017223338526, 0.07765675393576726, 0.3881708062039059, 0.5300217600656639, 0.3552220906059071, 0.17607174762569272, 0.09583385196453931, 0.1463275534925034, 0.0730997296063696, 0.6366085773083721, 0.36192478105773707, 0.17777470501105544, 0.5599920414098177, 0.22921972269513907, 0.07366702758918817, 0.030442616726392917, 0.050714615216554924, 0.049879295887904414, 0.0810365009575934, 0.014393945268289637, 0.0003433461909427852, 0.9774199935209982, 12.168757081991885, 5.9902252978682915, 0.27826806598396814, 0.2019313207225152, 0.3218351965738172, 0.02886289645453496, 6.024022558426048, 1.0956664915283816, 3.1057893862618946, 1.1793678558994225, 0.1562921154211139, 1.6144355303008542, 0.09058522309614364, 0.3367097019360191, 1.2908423984679858, 0.44539155514430345, 0.30331186260007953, 0.6074225265101922, 0.06310694891222533, 0.21740922317613634, 0.4350022416250676, 1.1581473325553837, 0.2194021470208105, 1.9823520227855316, 0.7549126094488814, 0.03548248040740722, 0.035877817380681555, 1.8035503990207018, 0.888443081311938, 0.7129007377718207, 0.8327457976859359, 0.9190383903903465, 0.3540280751786271, 1.2181980468951175, 0.7296931783233809, 0.02825579930674493, 0.7985988318380782, 1.5603821827997215, 0.14176309823243735, 0.20251990722075253, 0.6502169766793224, 0.6021208851189861, 0.6109194154311082, 0.9220397163150504, 0.20595602663969342, 0.6237579740055182], [1.0155881651609762, 0.0740121187256047, 0.028335768277562224, 0.9691204446763003, 0.1749169077055807, 0.4890763923595115, 0.6648052286165044, 0.3453005855679501, 0.07551465355786739, 0.19333151890208833, 0.23005345720674486, 0.2566185683126442, 0.46978823239220063, 0.18096130654558173, 0.24275811773524442, 0.11959569197801899, 0.0938640882450978, 0.020492114924716944, 0.008807816841342032, 0.37530565293026125, 0.4822918122429589, 0.41578266291801974, 0.7724546302633918, 0.10542840436991638, 0.09589040070944382, 0.0470581123157882, 0.157830976287293, 0.41452642685288366, 0.10856670855689765, 0.5334536718076458, 0.7495045232071597, 0.4908809851772857, 0.2443235702373439, 0.1416348963434741, 0.20305546362505494, 0.10314304502377644, 0.9197090711966845, 0.5121269874087919, 0.25868011795219614, 0.83824057392118, 0.32821923118701485, 0.12785248573849226, 0.04812215589634594, 0.07093174647527631, 0.06947120993106716, 0.11944412314103495, 0.03204620628421684, 0.0005860974864836893, 1.3734395108470414, 14.839926960638007, 7.265935349785688, 0.38477473388590455, 0.2867378791555297, 0.46110984398970256, 0.041580929860929546, 8.363621309816322, 1.586187169694481, 4.431549835904831, 1.63628667021881, 0.2207237230417566, 2.3142893191396934, 0.15407288007437556, 0.5499339937607735, 1.86768061244041, 0.7194520233129432, 0.4510709040481701, 0.8483553354390997, 0.09150379129663684, 0.31339127352248825, 0.6888105746465804, 1.8131957529319696, 0.3273766086707291, 2.990429930275935, 1.1221058345170434, 0.06294176043454368, 0.05350611826339595, 2.5858006810141063, 1.303763839260926, 1.0374777656611989, 1.2075305563423395, 1.3148757487212857, 0.5089444574682838, 1.7879675351244357, 1.0578780167069775, 0.03947403266363356, 1.180873195596044, 2.2891374768631443, 0.23391495537978949, 0.29436870611626964, 0.9402229449823806, 0.8737631189042732, 0.8623946526848557, 1.3386814123643207, 0.28092824982583803, 0.8506864994546073], [2.1086845595960706, 0.15536608084710354, 0.0493132510954939, 1.7168604825219556, 0.3515032671579194, 1.0364870413941363, 1.39234452352106, 0.726918779367848, 0.157105578429558, 0.41451460757590713, 0.47681482536433134, 0.537041331367957, 0.9859690042983901, 0.37471231057188725, 0.5040494375740324, 0.2557440886440594, 0.1928236274980325, 0.042636941984888516, 0.020407364032777417, 0.7735731800979483, 1.063557038585873, 0.9405516758736008, 1.671654701326248, 0.22878538892988665, 0.20180494473435345, 0.09616822211036488, 0.29065913530643783, 0.8739562662935693, 0.22448042194338547, 1.0617502386642856, 1.591162298247715, 0.9874324743568174, 0.49800713223327164, 0.32723824721718014, 0.4127538076739731, 0.2168352312130886, 1.9865535088108865, 1.0838764211914955, 0.5799325836004942, 1.7307675986776083, 0.7030001311420783, 0.287358445298133, 0.1338370473622109, 0.14611119601022646, 0.14196264740158968, 0.2729957431328578, 0.08192826949159003, 0.0018836284298370427, 2.7973652770018322, 23.61255761363852, 11.434219960734083, 0.779340852144863, 0.6077569506418701, 0.9938269523443426, 0.09015766077774406, 16.95104420343338, 3.4411890377001444, 9.462744869862414, 3.3409436788923093, 0.46060132268016524, 4.991135195424227, 0.3854451774041234, 1.4313378331403193, 4.093503678609443, 2.0136811736969706, 1.0621738069280056, 1.7517713741752903, 0.20604130996235712, 0.6833190880703325, 1.9231470075475146, 4.725137850949286, 0.7863784211294823, 6.92754832504061, 2.544230777310707, 0.29742343115734726, 0.12898382292121943, 5.587436343271762, 2.898340912372422, 2.2976733618502987, 2.6548654524145534, 2.816951078600659, 1.1069661276964755, 3.998381429450606, 2.326745670945462, 0.08151761874778259, 2.621533778449878, 5.012801840621357, 0.6585347069749788, 0.6443079229094771, 2.0622163918297147, 1.9276726439053897, 1.8161307683858277, 2.965103922047099, 0.550513694263608, 1.670679044907305], [3.2354207743432184, 0.23945524475915497, 0.06941158881042539, 2.321850491980972, 0.5316418938306882, 1.4692493745028217, 2.1461199263500994, 1.1223412709455143, 0.241128765445964, 0.6448944798054892, 0.7308326820944514, 0.8269226001941979, 1.5182660172863491, 0.5744040930964552, 0.7728293877104648, 0.39694376523222435, 0.29489986964432163, 0.06537429461144702, 0.03326209986798808, 1.1801220924312148, 1.6817126430590719, 1.5024442087091268, 2.605707249452342, 0.3580033873465871, 0.3114802253771934, 0.1467480029921017, 0.4220764080989762, 1.362299237525215, 0.34375482927889056, 1.5944679193082634, 2.4866756481673806, 1.492233479535896, 0.7604440551945786, 0.5385312477091719, 0.6327271279171545, 0.3357441008967461, 3.1148487522603276, 1.6838363934330427, 0.9433898969288593, 2.5642547301120455, 1.0904852914359187, 0.42899594673314395, 0.24755818666593343, 0.2237587571183475, 0.21606517120046778, 0.435478005299461, 0.12279264589326616, 0.003768409085161116, 4.2402510417548855, 31.781976976526312, 15.304844119548633, 1.1845018417314275, 0.942760267546679, 1.5542675925686367, 0.1412866350370091, 25.703075216319647, 5.368501202815174, 14.781810686456174, 5.114004595578069, 0.7066666553243404, 7.81828841607767, 0.6163061216747787, 2.385181402499275, 6.451147180473505, 3.5698823235747605, 1.7223825299691369, 2.6802723388044214, 0.33372036507052155, 1.0724880878621368, 3.4506984171335944, 8.117051166921934, 1.2983072655429464, 11.135482307035316, 4.042164506828496, 7.435860379150232, 0.21321975862283915, 8.742502641125228, 4.563988449783543, 3.6302551911084655, 4.1840543866760775, 4.414555674751692, 1.7419873572882465, 6.334260311216986, 3.665636872586154, 0.12476003047327537, 4.115667481097659, 7.8324433704277885, 1.1442390624565262, 1.008910272073593, 3.23964060926138, 3.0385684118570193, 2.8162072305427013, 4.6864318223844625, 0.8199325573185936, 2.492058698929006], [4.111474193502544, 0.3049220122524455, 0.08448010306313349, 2.7621990246684933, 0.671918594612708, 1.7791320878203043, 2.734949705119983, 1.4307498264999507, 0.3064427334384321, 0.8243600305970837, 0.9281860933058241, 1.0528634840937952, 1.9314683901180825, 0.7297262271901007, 0.9808153183646954, 0.5065411022920605, 0.3746328521510939, 0.08299395220436337, 0.043594362354371696, 1.4960243574832532, 2.168361187736872, 1.945794162375657, 3.3385879685686057, 0.45965626297332896, 0.3968352671683644, 0.18617589870675627, 0.5224383966529689, 1.7528857419473378, 0.4364039483085271, 2.0055027350479535, 3.2020025773604326, 1.8837762930519404, 0.9665857816907043, 0.7184845924462826, 0.8108974436545251, 0.42947689585306764, 4.025239540415237, 2.156758227397997, 1.2515847617976403, 3.197207605459293, 1.3924041178431663, 0.534648512313027, 0.3542394352843905, 0.2846682086234532, 0.27364339522337194, 0.5613996959299072, 0.15213008242346684, 0.005634267063359026, 5.3707266999921, 37.86564508199721, 18.185056372345787, 1.5004960973064585, 1.206221108213616, 1.9969202653089015, 0.18170443469334727, 32.501286385955666, 6.878936839930105, 19.030616405910994, 6.515186414936211, 0.8981024235764152, 10.061449046272736, 0.7938618753734855, 3.134323826768623, 8.319959457574706, 4.810520821283456, 2.236184864156594, 3.400566151030822, 0.43839311421484956, 1.3783237692980632, 4.665222260743145, 10.845333768508105, 1.700905012999802, 14.487571561945435, 5.219028908273513, 13.351190982524624, 0.27921079214914807, 11.225333464444416, 5.865958015788984, 4.6783296497903475, 5.38965631378035, 5.702762661075653, 2.2459835125610628, 8.174014267279688, 4.720203690321498, 0.15834173007556243, 5.286966708818886, 10.046165408018322, 1.5238714321669313, 1.2941780674745766, 4.1604966137560755, 3.9104725393803452, 3.606012809332915, 6.03988826134963, 1.0269230178571382, 3.123134421117565], [4.736934310352659, 0.3516928483555221, 0.09502979577691266, 3.069917724325299, 0.7723779240170924, 1.992699127663149, 3.156673420204854, 1.6513290852772466, 0.35307011766639834, 0.9525070456302116, 1.0690239431203539, 1.2144366226158265, 2.2260860306413477, 0.8406514031893673, 1.128757602523961, 0.5846211114550155, 0.43178900047266205, 0.09555160897719893, 0.05109596286789871, 1.7217929468645092, 2.5178310775320147, 2.264491959882455, 3.8652389982939326, 0.5327883950733063, 0.4577979956957719, 0.21439453946425463, 0.5934598686075969, 2.03753163888615, 0.5025153743228965, 2.2980828637946136, 3.7224534637877724, 2.1633594138319387, 1.1150139488506348, 0.856790673661666, 0.9433030592891566, 0.49705456321854036, 4.695934712882732, 2.497456848839556, 1.4870576104403606, 3.6467854446059826, 1.608334813504234, 0.6089162174523838, 0.4421221153063972, 0.32848541073245185, 0.3147890924038763, 0.6507463127767665, 0.1723487673578476, 0.007233624226086156, 6.185972238022814, 42.141823685192634, 20.208896427426932, 1.7268382496976566, 1.3958460697168036, 2.3163128448908, 0.21088758743684724, 37.35943043870586, 7.9634375106586965, 22.125964238960627, 7.529077360003609, 1.034945009598342, 11.685454426461378, 0.9199386970589247, 3.669519359889537, 9.671019683180457, 5.692545321089532, 2.6008736209581254, 3.9140526499635175, 0.515707366678843, 1.597985159966509, 5.522202057566606, 12.806905304125532, 1.9874401794305907, 16.916545848382157, 6.0639765560866525, 16.74399459696461, 0.3260352106980226, 13.010838500932172, 6.7977636080184665, 5.430797969692528, 6.257105272624339, 6.649317214397374, 2.61051959902161, 9.496902347468867, 5.478771272622313, 0.1823013220568197, 6.128101436924045, 11.638623095482297, 1.791946167923023, 1.498626749947337, 4.819530792111678, 4.5357400922338655, 4.176090220319878, 7.0116368822150825, 1.1739335402110196, 3.571190626756185]]
#     # temple_data = [[],[],[],[]]
#     # create a horizontal plot
#     # 9ÂõæÈÅçÂéÜ
#     for i in range(3):
#         for j in range(3):
#             # ËÆ°ÁÆóËØØÂ∑ÆÊ£í
#
#             u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
#             u_max = max(u_vec)
#
#             # ‰πêËßÇ
#             T_dur = T_scales[i * 3 + j]
#             q0_elec = qe_scales_pos[i * 3 + j]
#             q0_vec = q0_elec * u_vec / u_max
#             qt_vec, time, Q_loss_pos = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
#             # ÊÇ≤ËßÇ
#             T_dur = T_scales[i * 3 + j]
#             q0_elec = qe_scales_neg[i * 3 + j]
#             q0_vec = q0_elec * u_vec / u_max
#             qt_vec, time, Q_loss_neg = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
#
#             Q_loss_errbar = [abs(x - y) for x, y in zip(Q_loss_pos, Q_loss_neg)]
#             Q_loss_errbar_top5 = [Q_loss_errbar[product] for product in list_product]
#
#             # Âπ≥ÂùáËÆ°ÁÆóÊï∞ÂÄº
#             T_dur = T_scales[i * 3 + j]
#             q0_elec = qe_scales[i * 3 + j]
#             q0_vec = q0_elec * u_vec / u_max
#             qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
#             n_color = 0
#             # for k in list_product:
#
#             list_inoperability = Q_loss
#
#             # list_inoperability = temple_data[1][i * 3 + j]
#             #
#             b = [list_inoperability[product] for product in list_product]
#             b = list(map(abs, b))
#
#             x_vec_top5 = [x_vec[product] for product in list_product]
#             b = [b[k]/x_vec_top5[k] for k in range(len(b))]
#             Q_loss_errbar_top5 =
#
#
#             axs[i, j].barh(list_name_Simple, b, xerr=Q_loss_errbar_top5, capsize=2.5, align='center', color=color_list,
#                            height=0.75, edgecolor="#4b4453", linewidth=1.5)
#             # color_list[n_color]
#             n_color += 1
#             axs[i, j].spines['top'].set_linewidth('0')  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
#             axs[i, j].spines['right'].set_linewidth('0')  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
#             axs[i, j].set_title(f"{list_scenario[i * 3 + j]}")
#             axs[i, j].set_xticks([math.ceil(max(b) / 10) * 10 * l / 2 for l in range(3)], color="black")
#             axs[0, 0].set_xlim(0, 2)
#             axs[0,0].set_xticks([0,1,2], color="black")
#
#             axs[2, 0].set_xlim(0, 22000)
#             axs[2, 0].set_xticks([0 ,20000], color="black")
#             axs[2, 1].set_xlim(0, 69000)
#             axs[2, 1].set_xticks([0, 60000], color="black")
#             axs[2, 2].set_xlim(0, 140000)
#             axs[2, 2].set_xticks([0, 130000], color="black")
#             # plt.yticks(rotation=30)
#             # axs[i, j].set_yticks( color="black")
#             axs[i, j].tick_params(axis='x', colors='black')
#             axs[i, j].tick_params(axis='y', colors='black')
#             # axs[i, j].set_xlim(0,720)
#             # axs[i, j].set_xticks([0,720])
#             axs[2, 1].set_xlabel("Lost", color="black")
#             axs[1, 0].set_ylabel("Industry", color="black")
#
#     plt.subplots_adjust(wspace=1, hspace=0.7)
#     # plt.legend(bbox_to_anchor=(1.2, 1.7), loc=3, borderaxespad=0)
#     # plt.title(f"{style}")
#     fig.savefig(f"figure/Histogram Chart of 5 Industries with the Largest Loss", dpi=500, bbox_inches='tight')
#     plt.show()
#     print("Image generated:\n",
#           "figure/Histogram Chart of 5 Industries with the Largest Loss / GDP")
#     return  0

def Histogram_Inop_graph(list_sectors,product_lost5,T_scales,qe_scales,qT_vec,x_vec, c_vec, Z_mat,qe_scales_pos,qe_scales_neg):
    # ÁîªÊü±Âõæ Inoperability_MEAN
    color_list = ["#F2ECFF", "#A7BCDA", "#D2B18C", "#E23735", "#474747"]

    list_scenario = ["1-in-11", "1-in-22", "1-in-33", "1-in-55", "1-in-110", "1-in-1,000", "1-in-10,000",
                     "1-in-100,000", "1-in-1,000,000"]
    # #Ëá™ÈÄâÁªòÂà∂Âπ∂ËÆæÁΩÆÁÆÄÁß∞
    # list_product = [49, 50, 55, 3, 93] #ÈÄâÊã©ÁªòÂà∂ÁöÑË°å‰∏ö‰∏ãÊ†á
    # top5_list = ["Electricity","Gas","Construction","Mine","Health",]#ËÆæÁΩÆÁÆÄÁß∞
    #
    list_name_Simple = ["ELEC", "GAS", "COST", "WHSL", "RETA"]
    # #Êåâ‰∏äÈÉ®ËÆ°ÁÆóÁªòÂà∂
    list_product = product_lost5
    top5_list = [list_sectors[product_lost5[i]] for i in range(len(product_lost5))]
    #

    o = 0
    for product in list_product:
        list_sectors[product] = list_name_Simple[o]
        o += 1

    plt.rcParams['figure.figsize'] = [10, 10]  # for square canvas
    # matplotlib.rcParams['font.size'] = 8.0
    # plt.style.use('ggplot')
    # plt.style.use('dark_background')

    style_list = ['default', 'classic', 'Solarize_Light2', 'bmh', 'dark_background', 'fast', 'fivethirtyeight',
                  'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark',
                  'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook',
                  'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white',
                  'seaborn-whitegrid', 'tableau-colorblind10']
    for i in style_list:
        plt.style.use(i)
        if i == 'bmh':
            break
    plt.style.use('default')
    # plt.style.use('bmh')
    plt.style.use('seaborn-bright')
    # plt.style.use('default')
    # plt.style.use('seaborn-bright')
    # plt.style.use(style)

    fig, axs = plt.subplots(3, 3)

    # temple_data = [[0.05981721124626788, 0.004011974202569095, 0.003120511888988286, 0.00028719112779336227, 0.009743044421869466, 7.306277752469083e-05, 0.037771737303445636, 0.019436136119719633, 0.004347841376404762, 0.01025810358204936, 0.013973683657693803, 0.015454196045569073, 0.027293843818517207, 0.01065839161879223, 0.016758103170647843, 0.006507448744784341, 0.005919536673836846, 0.0013085522514758826, 0.0003656017638384068, 0.015834531239683758, 0.022012723199011496, 0.01628379856693182, 0.025879637109794327, 0.003728486295132801, 0.005614388101380219, 0.003146644345062854, 0.01615023536283217, 0.023607487529038487, 0.006417746252682822, 0.03805559188432282, 0.03912038596527025, 0.026345610522681726, 0.01450681941264255, 0.005504963191223603, 0.010217265814727303, 0.005329857537824372, 0.0292131255061121, 0.024283482527391875, 0.007144167110946697, 0.007842057069429217, 0.01577321793379283, 0.00032848268505471776, 0.0013054526426893992, 0.003915988180453419, 0.004332466378810895, 0.0049070384341252625, 1.0491287601905666e-05, 6.9630444216543535e-06, 0.04461183250873476, 3.252269456162242, 1.599492411944449, 0.02691958019839977, 0.013573566330853985, 0.01989568148206336, 0.0011955986347009706, 0.3973793436109976, 0.055220519565140846, 0.1858530953782782, 0.11398388527772225, 0.013594013777764811, 0.09044346967371757, 0.0002535882537418696, 0.0028459816071374675, 0.07140156377088162, 0.006478293585447862, 0.021920844561124645, 0.05879347055673868, 0.0041302077472258674, 0.013292680938241192, 0.014937659179817776, 0.02595276324643456, 0.010994876310637478, 0.04733728815200464, 0.013955861284036416, 0.0005595105357978241, 0.002424826723268002, 0.11042172381027529, 0.03334685121239045, 0.02806683798566224, 0.03689782598992191, 0.04405038232173341, 0.021778497423824508, 0.044448978024182566, 0.038756758551059534, 0.0023687844003614186, 0.02306983426784903, 0.026047473883584582, 0.005703510225332203, 0.007276984203932856, 0.03468279055106315, 0.03482842485741782, 0.045678635232562735, 0.055327035453452404, 0.022953581328020476, 0.06978964044999234], [0.3788852414263617, 0.026958502261461254, 0.013959214773185739, 0.009316508499288867, 0.06747860317501271, 0.0014804599090019245, 0.24301728659004956, 0.12531232484475607, 0.027904430960505048, 0.06869771853105995, 0.08601921721482397, 0.09415830956643782, 0.17213314471950597, 0.06777499663166037, 0.09178969482559128, 0.04267923659997491, 0.03555425553803725, 0.00763384275029737, 0.002851755071694335, 0.13617683756637716, 0.16501127491261366, 0.1353021149111653, 0.25336108474788144, 0.035361540613385124, 0.03515737492775003, 0.01805561151704659, 0.07222640201751199, 0.1519992568805713, 0.04077488144673225, 0.20988438856707195, 0.2712192065093042, 0.18878499502383594, 0.09331662608326602, 0.0446051413314995, 0.07690175669466717, 0.037426904453934304, 0.3018645809204511, 0.1844076171617315, 0.08383846200804675, 0.20187631295894445, 0.11349059470866489, 0.008076029864304038, 0.013092809815983958, 0.02635323681000215, 0.026243562172253047, 0.03844131748221364, 0.0002795786160240018, 0.00012354071593139465, 0.4881443965964477, 8.478841261583648, 4.214803260179475, 0.14932841625294174, 0.10169800496198375, 0.15906415471929888, 0.01393270689339934, 3.163778560069921, 0.5216464320239016, 1.5380970630458402, 0.6287990602214845, 0.07968755545984298, 0.7940368667683552, 0.02260814949177698, 0.11703692543079722, 0.6236299013809503, 0.17211214323294993, 0.14389028840957915, 0.32083090883993914, 0.030922335321025975, 0.1062191604626489, 0.1821250919734252, 0.4776026496664635, 0.10228792337805605, 0.8459003074995339, 0.3344091317613562, 0.012121888313291354, 0.016942632202454032, 0.8921077668866872, 0.41036665614424384, 0.3385067195450622, 0.3984810746167078, 0.44953713567640585, 0.17389204334591493, 0.5646348947442255, 0.3510293796363327, 0.014863244275236002, 0.3539084120465209, 0.6979636408534766, 0.0548051857932816, 0.09529870397364373, 0.3158519035588286, 0.2905835588822305, 0.3129399428328461, 0.44599347817990265, 0.11306924364856906, 0.3438932096465771], [0.5289191702554753, 0.03798476292215373, 0.01771216526721896, 0.32259692324952927, 0.09351406987042614, 0.04661366370320044, 0.34201588892830176, 0.17673329037639696, 0.03912205690568226, 0.09744863392809293, 0.11998624266163513, 0.1322164533029386, 0.24167628551483986, 0.09451839884181698, 0.12714219055482512, 0.06043290584589451, 0.04940575796595398, 0.010649807502604268, 0.004175155246102953, 0.1934282042636391, 0.23729096943365763, 0.19821191926027673, 0.37399752613279696, 0.051595329911482364, 0.049328280298784284, 0.024964983269275872, 0.09378728891665203, 0.21365707448889015, 0.05680099887111262, 0.28813678574657214, 0.3831919943547378, 0.26193140326843267, 0.12952067319408558, 0.06624466009384379, 0.10738315074673581, 0.05289320388194241, 0.4462374682626968, 0.2612599752053285, 0.12423751382716931, 0.3567358975400762, 0.1632299632928336, 0.032884728366891026, 0.02010181330133387, 0.036970648942610575, 0.03654829461610276, 0.05638146184249126, 0.0031124487720220334, 0.0002089014877326533, 0.7029302341248048, 10.182811075663071, 5.03736933144678, 0.20566177467416738, 0.14503631853559784, 0.2291022606993347, 0.020371632811896172, 4.418694488311145, 0.7681842005328476, 2.2157084572943515, 0.868853746644446, 0.11280912595195246, 1.1475803620337208, 0.04950788901300076, 0.20560136800861467, 0.909368224597651, 0.2827550830231818, 0.21036921411721907, 0.4450964043045441, 0.04463780519838555, 0.15389817187688498, 0.28484969945159555, 0.7575022116237697, 0.15145013405602567, 1.3253827149844295, 0.5135565604495357, 0.021050317837162547, 0.024854103777336406, 1.2839477186947825, 0.6143776745845821, 0.498875230556834, 0.5847507214240855, 0.6527880360106703, 0.2512860534249457, 0.8434892708338922, 0.5130924657577725, 0.020683751347678195, 0.5438591296042136, 1.069618785148192, 0.0887804232164043, 0.14138058186736316, 0.45902833235328305, 0.42355968761296453, 0.4420153348309505, 0.6490097644582509, 0.15397612815226486, 0.4669637008227774], [0.7247503223506031, 0.05245072738692102, 0.02218287235429094, 0.646887082466335, 0.1266966647469888, 0.2577527194323403, 0.4717536312297348, 0.2443587118778611, 0.0537716186054058, 0.13565870796294038, 0.16429869076501807, 0.1821851756201467, 0.3331479502759389, 0.12933892819791853, 0.17353261194290173, 0.0840177095997081, 0.06736375238774533, 0.014603258774565947, 0.005983699560221721, 0.2672292684285644, 0.33423528749544296, 0.2837464818514768, 0.5338171883072484, 0.07311126627412035, 0.0679786092624844, 0.03389674324036362, 0.12030925154741733, 0.2943017223338526, 0.07765675393576726, 0.3881708062039059, 0.5300217600656639, 0.3552220906059071, 0.17607174762569272, 0.09583385196453931, 0.1463275534925034, 0.0730997296063696, 0.6366085773083721, 0.36192478105773707, 0.17777470501105544, 0.5599920414098177, 0.22921972269513907, 0.07366702758918817, 0.030442616726392917, 0.050714615216554924, 0.049879295887904414, 0.0810365009575934, 0.014393945268289637, 0.0003433461909427852, 0.9774199935209982, 12.168757081991885, 5.9902252978682915, 0.27826806598396814, 0.2019313207225152, 0.3218351965738172, 0.02886289645453496, 6.024022558426048, 1.0956664915283816, 3.1057893862618946, 1.1793678558994225, 0.1562921154211139, 1.6144355303008542, 0.09058522309614364, 0.3367097019360191, 1.2908423984679858, 0.44539155514430345, 0.30331186260007953, 0.6074225265101922, 0.06310694891222533, 0.21740922317613634, 0.4350022416250676, 1.1581473325553837, 0.2194021470208105, 1.9823520227855316, 0.7549126094488814, 0.03548248040740722, 0.035877817380681555, 1.8035503990207018, 0.888443081311938, 0.7129007377718207, 0.8327457976859359, 0.9190383903903465, 0.3540280751786271, 1.2181980468951175, 0.7296931783233809, 0.02825579930674493, 0.7985988318380782, 1.5603821827997215, 0.14176309823243735, 0.20251990722075253, 0.6502169766793224, 0.6021208851189861, 0.6109194154311082, 0.9220397163150504, 0.20595602663969342, 0.6237579740055182], [1.0155881651609762, 0.0740121187256047, 0.028335768277562224, 0.9691204446763003, 0.1749169077055807, 0.4890763923595115, 0.6648052286165044, 0.3453005855679501, 0.07551465355786739, 0.19333151890208833, 0.23005345720674486, 0.2566185683126442, 0.46978823239220063, 0.18096130654558173, 0.24275811773524442, 0.11959569197801899, 0.0938640882450978, 0.020492114924716944, 0.008807816841342032, 0.37530565293026125, 0.4822918122429589, 0.41578266291801974, 0.7724546302633918, 0.10542840436991638, 0.09589040070944382, 0.0470581123157882, 0.157830976287293, 0.41452642685288366, 0.10856670855689765, 0.5334536718076458, 0.7495045232071597, 0.4908809851772857, 0.2443235702373439, 0.1416348963434741, 0.20305546362505494, 0.10314304502377644, 0.9197090711966845, 0.5121269874087919, 0.25868011795219614, 0.83824057392118, 0.32821923118701485, 0.12785248573849226, 0.04812215589634594, 0.07093174647527631, 0.06947120993106716, 0.11944412314103495, 0.03204620628421684, 0.0005860974864836893, 1.3734395108470414, 14.839926960638007, 7.265935349785688, 0.38477473388590455, 0.2867378791555297, 0.46110984398970256, 0.041580929860929546, 8.363621309816322, 1.586187169694481, 4.431549835904831, 1.63628667021881, 0.2207237230417566, 2.3142893191396934, 0.15407288007437556, 0.5499339937607735, 1.86768061244041, 0.7194520233129432, 0.4510709040481701, 0.8483553354390997, 0.09150379129663684, 0.31339127352248825, 0.6888105746465804, 1.8131957529319696, 0.3273766086707291, 2.990429930275935, 1.1221058345170434, 0.06294176043454368, 0.05350611826339595, 2.5858006810141063, 1.303763839260926, 1.0374777656611989, 1.2075305563423395, 1.3148757487212857, 0.5089444574682838, 1.7879675351244357, 1.0578780167069775, 0.03947403266363356, 1.180873195596044, 2.2891374768631443, 0.23391495537978949, 0.29436870611626964, 0.9402229449823806, 0.8737631189042732, 0.8623946526848557, 1.3386814123643207, 0.28092824982583803, 0.8506864994546073], [2.1086845595960706, 0.15536608084710354, 0.0493132510954939, 1.7168604825219556, 0.3515032671579194, 1.0364870413941363, 1.39234452352106, 0.726918779367848, 0.157105578429558, 0.41451460757590713, 0.47681482536433134, 0.537041331367957, 0.9859690042983901, 0.37471231057188725, 0.5040494375740324, 0.2557440886440594, 0.1928236274980325, 0.042636941984888516, 0.020407364032777417, 0.7735731800979483, 1.063557038585873, 0.9405516758736008, 1.671654701326248, 0.22878538892988665, 0.20180494473435345, 0.09616822211036488, 0.29065913530643783, 0.8739562662935693, 0.22448042194338547, 1.0617502386642856, 1.591162298247715, 0.9874324743568174, 0.49800713223327164, 0.32723824721718014, 0.4127538076739731, 0.2168352312130886, 1.9865535088108865, 1.0838764211914955, 0.5799325836004942, 1.7307675986776083, 0.7030001311420783, 0.287358445298133, 0.1338370473622109, 0.14611119601022646, 0.14196264740158968, 0.2729957431328578, 0.08192826949159003, 0.0018836284298370427, 2.7973652770018322, 23.61255761363852, 11.434219960734083, 0.779340852144863, 0.6077569506418701, 0.9938269523443426, 0.09015766077774406, 16.95104420343338, 3.4411890377001444, 9.462744869862414, 3.3409436788923093, 0.46060132268016524, 4.991135195424227, 0.3854451774041234, 1.4313378331403193, 4.093503678609443, 2.0136811736969706, 1.0621738069280056, 1.7517713741752903, 0.20604130996235712, 0.6833190880703325, 1.9231470075475146, 4.725137850949286, 0.7863784211294823, 6.92754832504061, 2.544230777310707, 0.29742343115734726, 0.12898382292121943, 5.587436343271762, 2.898340912372422, 2.2976733618502987, 2.6548654524145534, 2.816951078600659, 1.1069661276964755, 3.998381429450606, 2.326745670945462, 0.08151761874778259, 2.621533778449878, 5.012801840621357, 0.6585347069749788, 0.6443079229094771, 2.0622163918297147, 1.9276726439053897, 1.8161307683858277, 2.965103922047099, 0.550513694263608, 1.670679044907305], [3.2354207743432184, 0.23945524475915497, 0.06941158881042539, 2.321850491980972, 0.5316418938306882, 1.4692493745028217, 2.1461199263500994, 1.1223412709455143, 0.241128765445964, 0.6448944798054892, 0.7308326820944514, 0.8269226001941979, 1.5182660172863491, 0.5744040930964552, 0.7728293877104648, 0.39694376523222435, 0.29489986964432163, 0.06537429461144702, 0.03326209986798808, 1.1801220924312148, 1.6817126430590719, 1.5024442087091268, 2.605707249452342, 0.3580033873465871, 0.3114802253771934, 0.1467480029921017, 0.4220764080989762, 1.362299237525215, 0.34375482927889056, 1.5944679193082634, 2.4866756481673806, 1.492233479535896, 0.7604440551945786, 0.5385312477091719, 0.6327271279171545, 0.3357441008967461, 3.1148487522603276, 1.6838363934330427, 0.9433898969288593, 2.5642547301120455, 1.0904852914359187, 0.42899594673314395, 0.24755818666593343, 0.2237587571183475, 0.21606517120046778, 0.435478005299461, 0.12279264589326616, 0.003768409085161116, 4.2402510417548855, 31.781976976526312, 15.304844119548633, 1.1845018417314275, 0.942760267546679, 1.5542675925686367, 0.1412866350370091, 25.703075216319647, 5.368501202815174, 14.781810686456174, 5.114004595578069, 0.7066666553243404, 7.81828841607767, 0.6163061216747787, 2.385181402499275, 6.451147180473505, 3.5698823235747605, 1.7223825299691369, 2.6802723388044214, 0.33372036507052155, 1.0724880878621368, 3.4506984171335944, 8.117051166921934, 1.2983072655429464, 11.135482307035316, 4.042164506828496, 7.435860379150232, 0.21321975862283915, 8.742502641125228, 4.563988449783543, 3.6302551911084655, 4.1840543866760775, 4.414555674751692, 1.7419873572882465, 6.334260311216986, 3.665636872586154, 0.12476003047327537, 4.115667481097659, 7.8324433704277885, 1.1442390624565262, 1.008910272073593, 3.23964060926138, 3.0385684118570193, 2.8162072305427013, 4.6864318223844625, 0.8199325573185936, 2.492058698929006], [4.111474193502544, 0.3049220122524455, 0.08448010306313349, 2.7621990246684933, 0.671918594612708, 1.7791320878203043, 2.734949705119983, 1.4307498264999507, 0.3064427334384321, 0.8243600305970837, 0.9281860933058241, 1.0528634840937952, 1.9314683901180825, 0.7297262271901007, 0.9808153183646954, 0.5065411022920605, 0.3746328521510939, 0.08299395220436337, 0.043594362354371696, 1.4960243574832532, 2.168361187736872, 1.945794162375657, 3.3385879685686057, 0.45965626297332896, 0.3968352671683644, 0.18617589870675627, 0.5224383966529689, 1.7528857419473378, 0.4364039483085271, 2.0055027350479535, 3.2020025773604326, 1.8837762930519404, 0.9665857816907043, 0.7184845924462826, 0.8108974436545251, 0.42947689585306764, 4.025239540415237, 2.156758227397997, 1.2515847617976403, 3.197207605459293, 1.3924041178431663, 0.534648512313027, 0.3542394352843905, 0.2846682086234532, 0.27364339522337194, 0.5613996959299072, 0.15213008242346684, 0.005634267063359026, 5.3707266999921, 37.86564508199721, 18.185056372345787, 1.5004960973064585, 1.206221108213616, 1.9969202653089015, 0.18170443469334727, 32.501286385955666, 6.878936839930105, 19.030616405910994, 6.515186414936211, 0.8981024235764152, 10.061449046272736, 0.7938618753734855, 3.134323826768623, 8.319959457574706, 4.810520821283456, 2.236184864156594, 3.400566151030822, 0.43839311421484956, 1.3783237692980632, 4.665222260743145, 10.845333768508105, 1.700905012999802, 14.487571561945435, 5.219028908273513, 13.351190982524624, 0.27921079214914807, 11.225333464444416, 5.865958015788984, 4.6783296497903475, 5.38965631378035, 5.702762661075653, 2.2459835125610628, 8.174014267279688, 4.720203690321498, 0.15834173007556243, 5.286966708818886, 10.046165408018322, 1.5238714321669313, 1.2941780674745766, 4.1604966137560755, 3.9104725393803452, 3.606012809332915, 6.03988826134963, 1.0269230178571382, 3.123134421117565], [4.736934310352659, 0.3516928483555221, 0.09502979577691266, 3.069917724325299, 0.7723779240170924, 1.992699127663149, 3.156673420204854, 1.6513290852772466, 0.35307011766639834, 0.9525070456302116, 1.0690239431203539, 1.2144366226158265, 2.2260860306413477, 0.8406514031893673, 1.128757602523961, 0.5846211114550155, 0.43178900047266205, 0.09555160897719893, 0.05109596286789871, 1.7217929468645092, 2.5178310775320147, 2.264491959882455, 3.8652389982939326, 0.5327883950733063, 0.4577979956957719, 0.21439453946425463, 0.5934598686075969, 2.03753163888615, 0.5025153743228965, 2.2980828637946136, 3.7224534637877724, 2.1633594138319387, 1.1150139488506348, 0.856790673661666, 0.9433030592891566, 0.49705456321854036, 4.695934712882732, 2.497456848839556, 1.4870576104403606, 3.6467854446059826, 1.608334813504234, 0.6089162174523838, 0.4421221153063972, 0.32848541073245185, 0.3147890924038763, 0.6507463127767665, 0.1723487673578476, 0.007233624226086156, 6.185972238022814, 42.141823685192634, 20.208896427426932, 1.7268382496976566, 1.3958460697168036, 2.3163128448908, 0.21088758743684724, 37.35943043870586, 7.9634375106586965, 22.125964238960627, 7.529077360003609, 1.034945009598342, 11.685454426461378, 0.9199386970589247, 3.669519359889537, 9.671019683180457, 5.692545321089532, 2.6008736209581254, 3.9140526499635175, 0.515707366678843, 1.597985159966509, 5.522202057566606, 12.806905304125532, 1.9874401794305907, 16.916545848382157, 6.0639765560866525, 16.74399459696461, 0.3260352106980226, 13.010838500932172, 6.7977636080184665, 5.430797969692528, 6.257105272624339, 6.649317214397374, 2.61051959902161, 9.496902347468867, 5.478771272622313, 0.1823013220568197, 6.128101436924045, 11.638623095482297, 1.791946167923023, 1.498626749947337, 4.819530792111678, 4.5357400922338655, 4.176090220319878, 7.0116368822150825, 1.1739335402110196, 3.571190626756185]]
    # temple_data = [[],[],[],[]]
    # create a horizontal plot
    # 9ÂõæÈÅçÂéÜ
    for i in range(3):
        for j in range(3):
            # ËÆ°ÁÆóËØØÂ∑ÆÊ£í

            u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
            u_max = max(u_vec)


            # ‰πêËßÇ
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales_pos[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec_pos, time, Q_loss_pos = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            row_sums = np.sum(qt_vec_pos[:, :500], axis=1) / 500
            Inoperability_MEAN_pos = [row_sums[product] for product in list_product]

            # ÊÇ≤ËßÇ
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales_neg[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec_neg, time, Q_loss_neg = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            row_sums = np.sum(qt_vec_neg[:, :500], axis=1) / 500
            Inoperability_MEAN_neg = [row_sums[product] for product in list_product]

            Inoperability_MEAN_errbar_top5 = [abs(x - y) for x, y in
                                              zip(Inoperability_MEAN_neg, Inoperability_MEAN_pos)]

            # Âπ≥ÂùáËÆ°ÁÆóÊï∞ÂÄº
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            list_inoperability_mean = np.sum(qt_vec[:, :500], axis=1) / 500

            n_color = 0

            list_inoperability = list_inoperability_mean

            # list_inoperability = temple_data[2][i * 3 + j]
            #
            b = [list_inoperability[product] for product in list_product]
            b = list(map(abs, b))
            axs[i, j].barh(list_name_Simple, b, xerr=Inoperability_MEAN_errbar_top5, capsize=2.5, align='center',
                           color=color_list, height=0.75, edgecolor="#4b4453", linewidth=1.5)
            # color_list[n_color]
            n_color += 1
            axs[i, j].spines['top'].set_linewidth('0')  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
            axs[i, j].spines['right'].set_linewidth('0')  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
            axs[i, j].set_title(f"{list_scenario[i * 3 + j]}")
            rate = 0.01
            axs[i, j].set_xticks([math.ceil(max(b) / rate / 2) * 2 * rate * l / 2 for l in range(3)], color="black",
                                 rotation=30)
            axs[0, 0].set_xlim(0, 0.01)
            axs[0, 0].set_xticks([0, 0.01], color="black")
            # plt.yticks(rotation=30)
            # axs[i, j].set_yticks( color="black")
            axs[i, j].tick_params(axis='x', colors='black')
            axs[i, j].tick_params(axis='y', colors='black')
            # axs[i, j].set_xlim(0,720)
            # axs[i, j].set_xticks([0,720])
            axs[2, 1].set_xlabel("Inoperability_Mean", color="black")
            axs[1, 0].set_ylabel("Industry", color="black")

    plt.subplots_adjust(wspace=1, hspace=0.7)
    # plt.legend(bbox_to_anchor=(1.2, 1.7), loc=3, borderaxespad=0)
    # plt.title(f"{style}")
    fig.savefig(f"figure/Histogram Chart of 5 Industries with the Inoperability_Mean", dpi=500, bbox_inches='tight')
    plt.show()
    print("Image generated:\n",
          "figure/Histogram Chart of 5 Industries with the Inoperability_Mean")

    return 0

def three_in_one_graph(list_sectors,product_lost5,T_scales,qe_scales,qT_vec,x_vec, c_vec, Z_mat,qe_scales_pos,qe_scales_neg):
    # ÁîªÊü±Áä∂Âõæ3Âêà‰∏Ä LOST
    color_list = ["#F2ECFF", "#A7BCDA", "#D2B18C"]
    import numpy as np
    list_scenario = ["1-in-11", "1-in-22", "1-in-33", "1-in-55", "1-in-110", "1-in-1,000", "1-in-10,000",
                     "1-in-100,000", "1-in-1,000,000"]
    # list_product = [49, 50, 55, 3, 93]
    # list_name_Simple = ["Electricity","Gas","Construction","Mine","Health",]
    ind = [0, 1, 2, 3, 4]
    ind = np.arange(5)
    width = 0.22
    o = 0
    list_product = product_lost5
    list_name_Simple = ["ELEC", "GAS", "COST", "WHSL", "RETA"]
    for product in list_product:
        list_sectors[product] = list_name_Simple[o]
        o += 1

    plt.rcParams['figure.figsize'] = [10, 4]  # for square canvas
    # matplotlib.rcParams['font.size'] = 8.0
    # plt.style.use('ggplot')
    # plt.style.use('dark_background')

    # style_list = ['default', 'classic', 'Solarize_Light2', 'bmh', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']
    # for i in style_list:
    #     plt.style.use(i)
    #     if i == 'bmh':
    #         break
    # plt.style.use('default')
    # plt.style.use('bmh')
    # plt.style.use('seaborn-pastel')
    from matplotlib import cycler

    fig, axs = plt.subplots(3, 1, figsize=(2, 5))

    # create a horizontal plot
    # 9ÂõæÈÅçÂéÜ
    for i in range(3):
        for j in range(3):
            # ÊØè‰∏™Ë°å‰∏öÈÅçÂéÜ
            # for k in list_product:
            #
            # # Âπ≥ÂùáËÆ°ÁÆóÊï∞ÂÄº
            # u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
            # u_max = max(u_vec)
            # T_dur = T_scales[i * 3 + j]
            # q0_elec = qe_scales[i * 3 + j]
            # q0_vec = q0_elec * u_vec / u_max
            # qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            # list_inoperability = Q_loss
            # # list_inoperability = temple_data[1][i * 3 + j]
            # #
            # b = [list_inoperability[product] for product in list_product]
            # b = list(map(abs, b))

            # ËÆ°ÁÆóËØØÂ∑ÆÊ£í

            u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
            u_max = max(u_vec)

            # ‰πêËßÇ
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales_pos[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss_pos = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            # ÊÇ≤ËßÇ
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales_neg[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss_neg = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)

            Q_loss_errbar = [abs(x - y) for x, y in zip(Q_loss_pos, Q_loss_neg)]
            Q_loss_errbar_top5 = [Q_loss_errbar[product] for product in list_product]

            # Âπ≥ÂùáËÆ°ÁÆóÊï∞ÂÄº
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            n_color = 0
            # for k in list_product:

            list_inoperability = Q_loss

            # list_inoperability = temple_data[1][i * 3 + j]
            #
            b = [list_inoperability[product] for product in list_product]
            b = list(map(abs, b))




            axs[i].barh(ind - (width - j * width), b, width,xerr=Q_loss_errbar_top5, capsize=1.5, align='center', color=color_list[j], edgecolor="#4b4453", linewidth=1.5,
                        label=f'{list_scenario[i * 3 + j]}')

        # ax.set_xticks(ind)ind - (width - j*width)
        # axs[i, 0].barh(list_name_Simple, b)

        axs[i].spines['top'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
        axs[i].spines['right'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
        # axs[i, 0].set_title(f"{list_scenario[i*3 + j]}")
        # axs[i, j].set_xlim(0,720)
        # axs[i, j].set_xticks([0,720])
        n_cut = 2
        axs[0].set_xticks([300 * l / n_cut for l in range(n_cut + 1)])
        axs[1].set_xticks([8000 * l / n_cut for l in range(n_cut + 1)])
        axs[2].set_xticks([120000 * l / n_cut for l in range(n_cut + 1)])
        axs[2].set_xlabel("Loss (Million Pounds)", color='black')
        axs[1].set_ylabel("Sector", color='black')
        axs[i].tick_params(axis='x', colors='black')
        axs[i].tick_params(axis='y', colors='black')
        axs[i].set_yticks(ind)
        axs[i].set_yticklabels(("ELEC", "GAS", "COST", "WHSL", "RETA"))
        axs[i].legend(bbox_to_anchor=(1.1, .3 - i * .15), loc=3, borderaxespad=0)
    #Êü•ÁúãÂΩìÂâçÂ≠ó‰Ωì
    # import matplotlib as mpl
    # print(mpl.rcParams['font.family'])
    plt.subplots_adjust(wspace=.3, hspace=0.6, right=0.8)
    # plt.legend(bbox_to_anchor=(1.2, 1.7), loc=3, borderaxespad=0)
    # fig.savefig("first.png", dpi=500, bbox_inches='tight')
    # plt.title(f"{style}")
    fig.savefig(f"figure/Comparison Chart of 5 Industries with the Largest Loss.png", dpi=500, bbox_inches='tight')
    plt.show()
    #
    #
    #
    # ÁîªÊü±Áä∂Âõæ3Âêà‰∏Ä INOP
    color_list = ["#F2ECFF", "#A7BCDA", "#D2B18C"]
    import numpy as np
    list_scenario = ["1-in-11", "1-in-22", "1-in-33", "1-in-55", "1-in-110", "1-in-1,000", "1-in-10,000",
                     "1-in-100,000", "1-in-1,000,000"]
    # #Ëá™ÈÄâÁªòÂà∂Âπ∂ËÆæÁΩÆÁÆÄÁß∞
    # list_product = [49, 50, 55, 3, 93] #ÈÄâÊã©ÁªòÂà∂ÁöÑË°å‰∏ö‰∏ãÊ†á
    # top5_list = ["Electricity","Gas","Construction","Mine","Health",]#ËÆæÁΩÆÁÆÄÁß∞
    #
    # #Êåâ‰∏äÈÉ®ËÆ°ÁÆóÁªòÂà∂
    # list_product = product_lost5
    # top5_list = [list_name[product_lost5[i]] for i in range(len(product_lost5))]
    #

    ind = [0, 1, 2, 3, 4]
    ind = np.arange(5)
    width = 0.22
    o = 0

    list_product = product_lost5
    list_name_Simple = ["ELEC", "Gas", "COST", "WHSL", "RETA"]
    for product in list_product:
        list_sectors[product] = list_name_Simple[o]
        o += 1

    plt.rcParams['figure.figsize'] = [10, 4]  # for square canvas
    # matplotlib.rcParams['font.size'] = 8.0
    # plt.style.use('ggplot')
    # plt.style.use('dark_background')

    # style_list = ['default', 'classic', 'Solarize_Light2', 'bmh', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']
    # for i in style_list:
    #     plt.style.use(i)
    #     if i == 'bmh':
    #         break
    # plt.style.use('default')
    # plt.style.use('bmh')
    # plt.style.use('seaborn-pastel')
    from matplotlib import cycler

    fig, axs = plt.subplots(3, 1, figsize=(2, 5))

    # create a horizontal plot
    # 9ÂõæÈÅçÂéÜ
    for i in range(3):
        for j in range(3):
            # Âπ≥ÂùáËÆ°ÁÆóÊï∞ÂÄº
            u_vec = Z_mat[49, :] / x_vec  # share of electricity in the output of industry ùëñ d
            u_max = max(u_vec)
            T_dur = T_scales[i * 3 + j]
            q0_elec = qe_scales[i * 3 + j]
            q0_vec = q0_elec * u_vec / u_max
            qt_vec, time, Q_loss = diim(q0_vec, qT_vec, T_dur, x_vec, c_vec, Z_mat)
            list_inoperability_mean = np.sum(qt_vec[:, :500], axis=1) / 500
            list_inoperability = list_inoperability_mean
            # list_inoperability = temple_data[2][i * 3 + j]
            #
            b = [list_inoperability[product] for product in list_product]
            b = list(map(abs, b))
            axs[i].barh(ind - (width - j * width), b, width, color=color_list[j], edgecolor="#4b4453", linewidth=1.5,
                        label=f'{list_scenario[i * 3 + j]}')

        # ax.set_xticks(ind)ind - (width - j*width)
        # axs[i, 0].barh(list_name_Simple, b)

        axs[i].spines['top'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
        axs[i].spines['right'].set_linewidth(0)  # ËÆæÁΩÆËæπÊ°ÜÁ∫øÂÆΩ‰∏∫2.0
        # axs[i, 0].set_title(f"{list_scenario[i*3 + j]}")
        # axs[i, j].set_xlim(0,720)
        # axs[i, j].set_xticks([0,720])
        n_cut = 2
        axs[0].set_xticks([0.10 * l / n_cut for l in range(n_cut + 1)])
        axs[1].set_xticks([0.20 * l / n_cut for l in range(n_cut + 1)])
        axs[2].set_xticks([0.40 * l / n_cut for l in range(n_cut + 1)])
        axs[2].set_xlabel("Inoperability_Mean", color='black')
        axs[1].set_ylabel("Section", color='black')
        axs[i].tick_params(axis='x', colors='black')
        axs[i].tick_params(axis='y', colors='black')
        axs[i].set_yticks(ind)
        axs[i].set_yticklabels(("ELEC", "Gas", "COST", "WHSL", "RETA"))
        axs[i].legend(bbox_to_anchor=(1.1, .3 - i * .15), loc=3, borderaxespad=0)

    plt.subplots_adjust(wspace=.3, hspace=0.6, right=0.8)
    # plt.legend(bbox_to_anchor=(1.2, 1.7), loc=3, borderaxespad=0)
    # fig.savefig("first.png", dpi=500, bbox_inches='tight')
    # plt.title(f"{style}")
    fig.savefig(f"figure/Comparison Chart of 5 Industries with Inoperability_Mean.png", dpi=500, bbox_inches='tight')
    plt.show()
    print("Image generated:\n","figure/Comparison Chart of 5 Industries with the Largest Loss.png\nfigure/Comparison Chart of 5 Industries with Inoperability_Mean.png")

def picture_integration():
    path_list = ['figure/Time series of 5 Industries with the Largest Loss.png',
                 "figure/Comparison Chart of 5 Industries with the Largest Loss.png",
                 "figure/Comparison Chart of 5 Industries with Inoperability_Mean.png",
                 "figure/Histogram Chart of 5 Industries with the Largest Loss.png",
                 "figure/Histogram Chart of 5 Industries with the Inoperability_Mean.png",
                 "6-temporary_picture/name3.png"]
    # ÂõæÁâá‰øÆÂûã

    from PIL import Image, ImageDraw, ImageFont

    image = Image.open(path_list[0])
    resized_image = image.resize((2700, 2200), Image.ANTIALIAS)
    resized_image.save(path_list[0])

    image = Image.open(path_list[1])
    resized_image = image.resize((2100, 2200), Image.ANTIALIAS)
    resized_image.save(path_list[1])

    image = Image.open(path_list[2])
    resized_image = image.resize((2100, 2200), Image.ANTIALIAS)
    resized_image.save(path_list[2])

    image = Image.open(path_list[3])
    resized_image = image.resize((2300, 1533), Image.ANTIALIAS)
    resized_image.save(path_list[3])

    image = Image.open(path_list[4])
    resized_image = image.resize((2300, 1533), Image.ANTIALIAS)
    resized_image.save(path_list[4])

    image = Image.open(path_list[5])
    resized_image = image.resize((2300, 1533), Image.ANTIALIAS)
    resized_image.save(path_list[5])

    def addNumToImg(img, str, path):
        # Ê†áÊï∞Â≠ó
        drawImg = ImageDraw.Draw(img)  # ÂàõÂª∫‰∏Ä‰∏™ÁªòÁîªÂØπË±°ÔºåÂú®img‰∏äÈù¢Áîª
        font = ImageFont.truetype("arial.ttf", 120)  # ImageFontÂØπË±°
        # print(img.size)
        drawImg.text((40, 10), str, (0, 0, 0), font)  # Á°ÆÂÆöÂ•ΩÂùêÊ†á‰∏çËÉΩË∂Ö‰∫ÜÔºÅÔºÅÔºÅ
        img.save(path)  # ‰øùÂ≠ò‰øÆÊîπÂêéÁöÑÂõæÁâáÔºåÔºà‰øÆÊîπÂêéÁöÑÂêçÂ≠óÔºåÊ†ºÂºèÔºâ

        # modified_img = Image.open("modified.png")
        # modified_img.show()

    index_list = ["(a)", "(b)", "(c)", "(e)", "(f)", "(d)"]
    for i in range(len(path_list)):
        img = Image.open(path_list[i])
        addNumToImg(img, index_list[i], path_list[i])
        img.close()

    def picture_stitching_horizontal(path1, path2, pathreturn):
        # ÂõæÁâáÊãºÊé•

        img1 = Image.open(path1)
        img2 = Image.open(path2)
        size1, size2 = img1.size, img2.size

        joint = Image.new("RGB", (size1[0] + size2[0], size1[1]))
        loc1, loc2 = (0, 0), (size1[0], 0)

        joint.paste(img1, loc1)
        joint.paste(img2, loc2)
        joint.save(pathreturn)
        # joint.show()

    def picture_stitching_portrait(path1, path2, pathreturn):
        # ÂõæÁâáÊãºÊé•

        img1 = Image.open(path1)
        img2 = Image.open(path2)
        size1, size2 = img1.size, img2.size

        joint = Image.new("RGB", (size1[0], size1[1] + size2[1]))
        loc1, loc2 = (0, 0), (0, size1[1])

        joint.paste(img1, loc1)
        joint.paste(img2, loc2)
        joint.save(pathreturn)
        joint.show()

    picture_stitching_horizontal(path_list[1], path_list[2], "6-temporary_picture/1.png")
    picture_stitching_horizontal(path_list[0], "6-temporary_picture/1.png", "6-temporary_picture/2.png")

    picture_stitching_horizontal(path_list[3], path_list[4], "6-temporary_picture/3.png")
    picture_stitching_horizontal(path_list[5], "6-temporary_picture/3.png", "6-temporary_picture/4.png")

    picture_stitching_portrait("6-temporary_picture/2.png", "6-temporary_picture/4.png", "figure/DIIM_Figure.png")
    print("The picture is integrated:\n","figure/DIIM_Figure.png")

def picture_integration_Simplified():
    path_list = ['figure/Time series of 5 Industries with the Largest Loss.png',
                 "figure/Comparison Chart of 5 Industries with the Largest Loss.png",
                 "figure/Comparison Chart of 5 Industries with Inoperability_Mean.png",
                 "figure/Histogram Chart of 5 Industries with the Largest Loss.png",
                 "figure/Histogram Chart of 5 Industries with the Inoperability_Mean.png",
                 "figure/list_of_top5.png"]
    # ÂõæÁâá‰øÆÂûã

    from PIL import Image, ImageDraw, ImageFont

    image = Image.open(path_list[0])
    resized_image = image.resize((2700, 2200), Image.ANTIALIAS)
    resized_image.save(path_list[0])

    image = Image.open(path_list[1])
    resized_image = image.resize((2100, 2200), Image.ANTIALIAS)
    resized_image.save(path_list[1])

    image = Image.open(path_list[2])
    resized_image = image.resize((2100, 2200), Image.ANTIALIAS)
    resized_image.save(path_list[2])

    image = Image.open(path_list[3])
    resized_image = image.resize((2300, 1533), Image.ANTIALIAS)
    resized_image.save(path_list[3])

    image = Image.open(path_list[4])
    resized_image = image.resize((2300, 1533), Image.ANTIALIAS)
    resized_image.save(path_list[4])

    image = Image.open(path_list[5])
    resized_image = image.resize((2300, 1533), Image.ANTIALIAS)
    resized_image.save(path_list[5])

    def addNumToImg(img, str, path):
        # Ê†áÊï∞Â≠ó
        drawImg = ImageDraw.Draw(img)  # ÂàõÂª∫‰∏Ä‰∏™ÁªòÁîªÂØπË±°ÔºåÂú®img‰∏äÈù¢Áîª
        font = ImageFont.truetype("arial.ttf", 120)  # ImageFontÂØπË±°
        # print(img.size)
        drawImg.text((40, 10), str, (0, 0, 0), font)  # Á°ÆÂÆöÂ•ΩÂùêÊ†á‰∏çËÉΩË∂Ö‰∫ÜÔºÅÔºÅÔºÅ
        img.save(path)  # ‰øùÂ≠ò‰øÆÊîπÂêéÁöÑÂõæÁâáÔºåÔºà‰øÆÊîπÂêéÁöÑÂêçÂ≠óÔºåÊ†ºÂºèÔºâ

        # modified_img = Image.open("modified.png")
        # modified_img.show()

    index_list = ["(a)", "(b)", "(c)", "(e)", "(f)", "(d)"]
    for i in range(len(path_list)):
        img = Image.open(path_list[i])
        addNumToImg(img, index_list[i], path_list[i])
        img.close()

    def picture_stitching_horizontal(path1, path2, pathreturn):
        # ÂõæÁâáÊãºÊé•

        img1 = Image.open(path1)
        img2 = Image.open(path2)
        size1, size2 = img1.size, img2.size

        joint = Image.new("RGB", (size1[0] + size2[0], size1[1]))
        loc1, loc2 = (0, 0), (size1[0], 0)

        joint.paste(img1, loc1)
        joint.paste(img2, loc2)
        joint.save(pathreturn)
        joint.show()

    def picture_stitching_portrait(path1, path2, pathreturn):
        # ÂõæÁâáÊãºÊé•

        img1 = Image.open(path1)
        img2 = Image.open(path2)
        size1, size2 = img1.size, img2.size

        joint = Image.new("RGB", (size1[0], size1[1] + size2[1]))
        loc1, loc2 = (0, 0), (0, size1[1])

        joint.paste(img1, loc1)
        joint.paste(img2, loc2)
        joint.save(pathreturn)
        joint.show()

    picture_stitching_horizontal(path_list[0], path_list[1], "figure/DIIM_Figure_Simplified.png")
    print("The picture is integrated:\n", "figure/DIIM_Figure_Simplified.png")

